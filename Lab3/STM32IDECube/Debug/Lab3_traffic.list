
Lab3_traffic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003058  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003184  08003184  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003184  08003184  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003184  08003184  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800318c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000060  080031ec  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080031ec  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009624  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ace  00000000  00000000  000296ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c45  00000000  00000000  0002c5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba25  00000000  00000000  000431fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082636  00000000  00000000  0004ec22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a28  00000000  00000000  000d12ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	0800314c 	.word	0x0800314c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	0800314c 	.word	0x0800314c

0800014c <isBUTTON1Pressed>:
int KeyReg2BUTTON3 = NORMAL_STATE;
int KeyReg3BUTTON3 = NORMAL_STATE; //trang thai on dinh truoc do
int TimerForBUTTON3Press = 300; //nhan de 3s

//NHAN THA
int isBUTTON1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(BUTTON1_flag==1){//nhan tha //set flag // ham while main truy cap vao duoc
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isBUTTON1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isBUTTON1Pressed+0x16>
		BUTTON1_flag=0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isBUTTON1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1; //tra ve while(1)
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isBUTTON1Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000007c 	.word	0x2000007c

08000170 <isBUTTON2Pressed>:
int isBUTTON2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(BUTTON2_flag==1){//nhan tha //set flag // ham while main truy cap vao duoc
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isBUTTON2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isBUTTON2Pressed+0x16>
		BUTTON2_flag=0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isBUTTON2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1; //tra ve while(1)
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isBUTTON2Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000084 	.word	0x20000084

08000194 <isBUTTON3Pressed>:
int isBUTTON3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(BUTTON3_flag==1){//nhan tha //set flag // ham while main truy cap vao duoc
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isBUTTON3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isBUTTON3Pressed+0x16>
		BUTTON3_flag=0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isBUTTON3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1; //tra ve while(1)
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isBUTTON3Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000088 	.word	0x20000088

080001b8 <subBUTTON1Process>:
//SET FLAG BUTTONS =1
void subBUTTON1Process(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	BUTTON1_flag=1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subBUTTON1Process+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	2000007c 	.word	0x2000007c

080001d0 <subBUTTON2Process>:
void subBUTTON2Process(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	BUTTON2_flag=1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subBUTTON2Process+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000084 	.word	0x20000084

080001e8 <subBUTTON3Process>:
void subBUTTON3Process(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	BUTTON3_flag=1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subBUTTON3Process+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000088 	.word	0x20000088

08000200 <getBUTTON1Input>:
}
int isBUTTON3LongPressed(){
	return 0;
}
//IMPLEMENT LONGPRESSED_BUTTON
void getBUTTON1Input(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
		KeyReg0BUTTON1 = KeyReg1BUTTON1;
 8000204:	4b22      	ldr	r3, [pc, #136]	; (8000290 <getBUTTON1Input+0x90>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a22      	ldr	r2, [pc, #136]	; (8000294 <getBUTTON1Input+0x94>)
 800020a:	6013      	str	r3, [r2, #0]
		KeyReg1BUTTON1 = KeyReg2BUTTON1;
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <getBUTTON1Input+0x98>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1f      	ldr	r2, [pc, #124]	; (8000290 <getBUTTON1Input+0x90>)
 8000212:	6013      	str	r3, [r2, #0]
		KeyReg2BUTTON1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin); // keyreg2 = trang thai cua button hien tai
 8000214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000218:	4820      	ldr	r0, [pc, #128]	; (800029c <getBUTTON1Input+0x9c>)
 800021a:	f001 ff57 	bl	80020cc <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <getBUTTON1Input+0x98>)
 8000224:	601a      	str	r2, [r3, #0]
		if(KeyReg0BUTTON1 == KeyReg1BUTTON1 && KeyReg1BUTTON1 == KeyReg2BUTTON1){ //trang thai on dinh
 8000226:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <getBUTTON1Input+0x94>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b19      	ldr	r3, [pc, #100]	; (8000290 <getBUTTON1Input+0x90>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d12b      	bne.n	800028a <getBUTTON1Input+0x8a>
 8000232:	4b17      	ldr	r3, [pc, #92]	; (8000290 <getBUTTON1Input+0x90>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b18      	ldr	r3, [pc, #96]	; (8000298 <getBUTTON1Input+0x98>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d125      	bne.n	800028a <getBUTTON1Input+0x8a>
			if(KeyReg3BUTTON1 != KeyReg2BUTTON1){ //nha tha
 800023e:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <getBUTTON1Input+0xa0>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b15      	ldr	r3, [pc, #84]	; (8000298 <getBUTTON1Input+0x98>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getBUTTON1Input+0x66>
				KeyReg3BUTTON1 = KeyReg2BUTTON1;
 800024a:	4b13      	ldr	r3, [pc, #76]	; (8000298 <getBUTTON1Input+0x98>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <getBUTTON1Input+0xa0>)
 8000250:	6013      	str	r3, [r2, #0]
				if(KeyReg2BUTTON1 == PRESSED_STATE){
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <getBUTTON1Input+0x98>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d117      	bne.n	800028a <getBUTTON1Input+0x8a>
					subBUTTON1Process();
 800025a:	f7ff ffad 	bl	80001b8 <subBUTTON1Process>
					TimerForBUTTON1Press = 100;
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <getBUTTON1Input+0xa4>)
 8000260:	2264      	movs	r2, #100	; 0x64
 8000262:	601a      	str	r2, [r3, #0]
					}
					TimerForBUTTON1Press = 100;
				}
			}
		}
}
 8000264:	e011      	b.n	800028a <getBUTTON1Input+0x8a>
				TimerForBUTTON1Press--;
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <getBUTTON1Input+0xa4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <getBUTTON1Input+0xa4>)
 800026e:	6013      	str	r3, [r2, #0]
				if(TimerForBUTTON1Press == 0){ //ket thuc nhan de
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <getBUTTON1Input+0xa4>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d108      	bne.n	800028a <getBUTTON1Input+0x8a>
					if(KeyReg2BUTTON1==PRESSED_STATE){
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <getBUTTON1Input+0x98>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d101      	bne.n	8000284 <getBUTTON1Input+0x84>
					subBUTTON1Process();
 8000280:	f7ff ff9a 	bl	80001b8 <subBUTTON1Process>
					TimerForBUTTON1Press = 100;
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <getBUTTON1Input+0xa4>)
 8000286:	2264      	movs	r2, #100	; 0x64
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	20000000 	.word	0x20000000
 8000298:	20000008 	.word	0x20000008
 800029c:	40010800 	.word	0x40010800
 80002a0:	2000000c 	.word	0x2000000c
 80002a4:	20000080 	.word	0x20000080

080002a8 <getBUTTON2Input>:
void getBUTTON2Input(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
		KeyReg0BUTTON2 = KeyReg1BUTTON2;
 80002ac:	4b22      	ldr	r3, [pc, #136]	; (8000338 <getBUTTON2Input+0x90>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a22      	ldr	r2, [pc, #136]	; (800033c <getBUTTON2Input+0x94>)
 80002b2:	6013      	str	r3, [r2, #0]
		KeyReg1BUTTON2 = KeyReg2BUTTON2;
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <getBUTTON2Input+0x98>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1f      	ldr	r2, [pc, #124]	; (8000338 <getBUTTON2Input+0x90>)
 80002ba:	6013      	str	r3, [r2, #0]
		KeyReg2BUTTON2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin); // keyreg2 = trang thai cua button hien tai
 80002bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c0:	4820      	ldr	r0, [pc, #128]	; (8000344 <getBUTTON2Input+0x9c>)
 80002c2:	f001 ff03 	bl	80020cc <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <getBUTTON2Input+0x98>)
 80002cc:	601a      	str	r2, [r3, #0]


		if(KeyReg0BUTTON2 == KeyReg1BUTTON2 && KeyReg1BUTTON2 == KeyReg2BUTTON2){ //trang thai on dinh
 80002ce:	4b1b      	ldr	r3, [pc, #108]	; (800033c <getBUTTON2Input+0x94>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b19      	ldr	r3, [pc, #100]	; (8000338 <getBUTTON2Input+0x90>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d12b      	bne.n	8000332 <getBUTTON2Input+0x8a>
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <getBUTTON2Input+0x90>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <getBUTTON2Input+0x98>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d125      	bne.n	8000332 <getBUTTON2Input+0x8a>
			if(KeyReg3BUTTON2 != KeyReg2BUTTON2){ //nha tha
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <getBUTTON2Input+0xa0>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <getBUTTON2Input+0x98>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d00d      	beq.n	800030e <getBUTTON2Input+0x66>
				KeyReg3BUTTON2 = KeyReg2BUTTON2;
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <getBUTTON2Input+0x98>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a14      	ldr	r2, [pc, #80]	; (8000348 <getBUTTON2Input+0xa0>)
 80002f8:	6013      	str	r3, [r2, #0]
				if(KeyReg2BUTTON2 == PRESSED_STATE){
 80002fa:	4b11      	ldr	r3, [pc, #68]	; (8000340 <getBUTTON2Input+0x98>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d117      	bne.n	8000332 <getBUTTON2Input+0x8a>
					subBUTTON2Process();
 8000302:	f7ff ff65 	bl	80001d0 <subBUTTON2Process>
					TimerForBUTTON2Press = 100;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <getBUTTON2Input+0xa4>)
 8000308:	2264      	movs	r2, #100	; 0x64
 800030a:	601a      	str	r2, [r3, #0]
					}
					TimerForBUTTON2Press = 100;
				}
			}
		}
}
 800030c:	e011      	b.n	8000332 <getBUTTON2Input+0x8a>
				TimerForBUTTON2Press--;
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <getBUTTON2Input+0xa4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3b01      	subs	r3, #1
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <getBUTTON2Input+0xa4>)
 8000316:	6013      	str	r3, [r2, #0]
				if(TimerForBUTTON2Press == 0){ //ket thuc nhan de
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <getBUTTON2Input+0xa4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d108      	bne.n	8000332 <getBUTTON2Input+0x8a>
					if(KeyReg2BUTTON2==PRESSED_STATE){
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <getBUTTON2Input+0x98>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d101      	bne.n	800032c <getBUTTON2Input+0x84>
					subBUTTON2Process();
 8000328:	f7ff ff52 	bl	80001d0 <subBUTTON2Process>
					TimerForBUTTON2Press = 100;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <getBUTTON2Input+0xa4>)
 800032e:	2264      	movs	r2, #100	; 0x64
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000014 	.word	0x20000014
 800033c:	20000010 	.word	0x20000010
 8000340:	20000018 	.word	0x20000018
 8000344:	40010800 	.word	0x40010800
 8000348:	2000001c 	.word	0x2000001c
 800034c:	20000020 	.word	0x20000020

08000350 <getBUTTON3Input>:
void getBUTTON3Input(){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
		KeyReg0BUTTON3 = KeyReg1BUTTON3;
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <getBUTTON3Input+0x90>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <getBUTTON3Input+0x94>)
 800035a:	6013      	str	r3, [r2, #0]
		KeyReg1BUTTON3 = KeyReg2BUTTON3;
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <getBUTTON3Input+0x98>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a1f      	ldr	r2, [pc, #124]	; (80003e0 <getBUTTON3Input+0x90>)
 8000362:	6013      	str	r3, [r2, #0]
		KeyReg2BUTTON3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin); // keyreg2 = trang thai cua button hien tai
 8000364:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000368:	4820      	ldr	r0, [pc, #128]	; (80003ec <getBUTTON3Input+0x9c>)
 800036a:	f001 feaf 	bl	80020cc <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	461a      	mov	r2, r3
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <getBUTTON3Input+0x98>)
 8000374:	601a      	str	r2, [r3, #0]

		if(KeyReg0BUTTON3 == KeyReg1BUTTON3 && KeyReg1BUTTON3 == KeyReg2BUTTON3){ //trang thai on dinh
 8000376:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <getBUTTON3Input+0x94>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <getBUTTON3Input+0x90>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d12b      	bne.n	80003da <getBUTTON3Input+0x8a>
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <getBUTTON3Input+0x90>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <getBUTTON3Input+0x98>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	429a      	cmp	r2, r3
 800038c:	d125      	bne.n	80003da <getBUTTON3Input+0x8a>
			if(KeyReg3BUTTON3 != KeyReg2BUTTON3){ //nha tha
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <getBUTTON3Input+0xa0>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <getBUTTON3Input+0x98>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	429a      	cmp	r2, r3
 8000398:	d00d      	beq.n	80003b6 <getBUTTON3Input+0x66>
				KeyReg3BUTTON3 = KeyReg2BUTTON3;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <getBUTTON3Input+0x98>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <getBUTTON3Input+0xa0>)
 80003a0:	6013      	str	r3, [r2, #0]
				if(KeyReg2BUTTON3 == PRESSED_STATE){
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <getBUTTON3Input+0x98>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d117      	bne.n	80003da <getBUTTON3Input+0x8a>
					subBUTTON3Process();
 80003aa:	f7ff ff1d 	bl	80001e8 <subBUTTON3Process>
					TimerForBUTTON3Press = 100;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <getBUTTON3Input+0xa4>)
 80003b0:	2264      	movs	r2, #100	; 0x64
 80003b2:	601a      	str	r2, [r3, #0]
					}
					TimerForBUTTON3Press = 100;
				}
			}
		}
}
 80003b4:	e011      	b.n	80003da <getBUTTON3Input+0x8a>
				TimerForBUTTON3Press--;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <getBUTTON3Input+0xa4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <getBUTTON3Input+0xa4>)
 80003be:	6013      	str	r3, [r2, #0]
				if(TimerForBUTTON3Press == 0){ //ket thuc nhan de
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <getBUTTON3Input+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d108      	bne.n	80003da <getBUTTON3Input+0x8a>
					if(KeyReg2BUTTON3==PRESSED_STATE){
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <getBUTTON3Input+0x98>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d101      	bne.n	80003d4 <getBUTTON3Input+0x84>
					subBUTTON3Process();
 80003d0:	f7ff ff0a 	bl	80001e8 <subBUTTON3Process>
					TimerForBUTTON3Press = 100;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <getBUTTON3Input+0xa4>)
 80003d6:	2264      	movs	r2, #100	; 0x64
 80003d8:	601a      	str	r2, [r3, #0]
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000028 	.word	0x20000028
 80003e4:	20000024 	.word	0x20000024
 80003e8:	2000002c 	.word	0x2000002c
 80003ec:	40010800 	.word	0x40010800
 80003f0:	20000030 	.word	0x20000030
 80003f4:	20000034 	.word	0x20000034

080003f8 <display7SEG_1>:
 */


#include "main.h"
void display7SEG_1(int counter)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b09      	cmp	r3, #9
 8000404:	f200 8112 	bhi.w	800062c <display7SEG_1+0x234>
 8000408:	a201      	add	r2, pc, #4	; (adr r2, 8000410 <display7SEG_1+0x18>)
 800040a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040e:	bf00      	nop
 8000410:	08000439 	.word	0x08000439
 8000414:	0800046b 	.word	0x0800046b
 8000418:	0800049d 	.word	0x0800049d
 800041c:	080004cf 	.word	0x080004cf
 8000420:	08000501 	.word	0x08000501
 8000424:	08000533 	.word	0x08000533
 8000428:	08000565 	.word	0x08000565
 800042c:	08000597 	.word	0x08000597
 8000430:	080005c9 	.word	0x080005c9
 8000434:	080005fb 	.word	0x080005fb
	switch(counter)
	{
	case 0:
		HAL_GPIO_WritePin(INPUTSEG0_1_GPIO_Port, INPUTSEG0_1_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800043e:	487e      	ldr	r0, [pc, #504]	; (8000638 <display7SEG_1+0x240>)
 8000440:	f001 fe5b 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_2_GPIO_Port, INPUTSEG0_2_Pin, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044a:	487b      	ldr	r0, [pc, #492]	; (8000638 <display7SEG_1+0x240>)
 800044c:	f001 fe55 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_3_GPIO_Port, INPUTSEG0_3_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000456:	4878      	ldr	r0, [pc, #480]	; (8000638 <display7SEG_1+0x240>)
 8000458:	f001 fe4f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_4_GPIO_Port, INPUTSEG0_4_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000462:	4875      	ldr	r0, [pc, #468]	; (8000638 <display7SEG_1+0x240>)
 8000464:	f001 fe49 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000468:	e0e1      	b.n	800062e <display7SEG_1+0x236>
	case 1:
		HAL_GPIO_WritePin(INPUTSEG0_1_GPIO_Port, INPUTSEG0_1_Pin, GPIO_PIN_SET);
 800046a:	2201      	movs	r2, #1
 800046c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000470:	4871      	ldr	r0, [pc, #452]	; (8000638 <display7SEG_1+0x240>)
 8000472:	f001 fe42 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_2_GPIO_Port, INPUTSEG0_2_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047c:	486e      	ldr	r0, [pc, #440]	; (8000638 <display7SEG_1+0x240>)
 800047e:	f001 fe3c 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_3_GPIO_Port, INPUTSEG0_3_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000488:	486b      	ldr	r0, [pc, #428]	; (8000638 <display7SEG_1+0x240>)
 800048a:	f001 fe36 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_4_GPIO_Port, INPUTSEG0_4_Pin, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000494:	4868      	ldr	r0, [pc, #416]	; (8000638 <display7SEG_1+0x240>)
 8000496:	f001 fe30 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 800049a:	e0c8      	b.n	800062e <display7SEG_1+0x236>
	case 2:
		HAL_GPIO_WritePin(INPUTSEG0_1_GPIO_Port, INPUTSEG0_1_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a2:	4865      	ldr	r0, [pc, #404]	; (8000638 <display7SEG_1+0x240>)
 80004a4:	f001 fe29 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_2_GPIO_Port, INPUTSEG0_2_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ae:	4862      	ldr	r0, [pc, #392]	; (8000638 <display7SEG_1+0x240>)
 80004b0:	f001 fe23 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_3_GPIO_Port, INPUTSEG0_3_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ba:	485f      	ldr	r0, [pc, #380]	; (8000638 <display7SEG_1+0x240>)
 80004bc:	f001 fe1d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_4_GPIO_Port, INPUTSEG0_4_Pin, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c6:	485c      	ldr	r0, [pc, #368]	; (8000638 <display7SEG_1+0x240>)
 80004c8:	f001 fe17 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80004cc:	e0af      	b.n	800062e <display7SEG_1+0x236>
	case 3:
		HAL_GPIO_WritePin(INPUTSEG0_1_GPIO_Port, INPUTSEG0_1_Pin, GPIO_PIN_SET);
 80004ce:	2201      	movs	r2, #1
 80004d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d4:	4858      	ldr	r0, [pc, #352]	; (8000638 <display7SEG_1+0x240>)
 80004d6:	f001 fe10 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_2_GPIO_Port, INPUTSEG0_2_Pin, GPIO_PIN_SET);
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e0:	4855      	ldr	r0, [pc, #340]	; (8000638 <display7SEG_1+0x240>)
 80004e2:	f001 fe0a 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_3_GPIO_Port, INPUTSEG0_3_Pin, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ec:	4852      	ldr	r0, [pc, #328]	; (8000638 <display7SEG_1+0x240>)
 80004ee:	f001 fe04 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_4_GPIO_Port, INPUTSEG0_4_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f8:	484f      	ldr	r0, [pc, #316]	; (8000638 <display7SEG_1+0x240>)
 80004fa:	f001 fdfe 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80004fe:	e096      	b.n	800062e <display7SEG_1+0x236>
	case 4:
		HAL_GPIO_WritePin(INPUTSEG0_1_GPIO_Port, INPUTSEG0_1_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000506:	484c      	ldr	r0, [pc, #304]	; (8000638 <display7SEG_1+0x240>)
 8000508:	f001 fdf7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_2_GPIO_Port, INPUTSEG0_2_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000512:	4849      	ldr	r0, [pc, #292]	; (8000638 <display7SEG_1+0x240>)
 8000514:	f001 fdf1 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_3_GPIO_Port, INPUTSEG0_3_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800051e:	4846      	ldr	r0, [pc, #280]	; (8000638 <display7SEG_1+0x240>)
 8000520:	f001 fdeb 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_4_GPIO_Port, INPUTSEG0_4_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052a:	4843      	ldr	r0, [pc, #268]	; (8000638 <display7SEG_1+0x240>)
 800052c:	f001 fde5 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000530:	e07d      	b.n	800062e <display7SEG_1+0x236>
	case 5:
		HAL_GPIO_WritePin(INPUTSEG0_1_GPIO_Port, INPUTSEG0_1_Pin, GPIO_PIN_SET);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000538:	483f      	ldr	r0, [pc, #252]	; (8000638 <display7SEG_1+0x240>)
 800053a:	f001 fdde 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_2_GPIO_Port, INPUTSEG0_2_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000544:	483c      	ldr	r0, [pc, #240]	; (8000638 <display7SEG_1+0x240>)
 8000546:	f001 fdd8 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_3_GPIO_Port, INPUTSEG0_3_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000550:	4839      	ldr	r0, [pc, #228]	; (8000638 <display7SEG_1+0x240>)
 8000552:	f001 fdd2 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_4_GPIO_Port, INPUTSEG0_4_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800055c:	4836      	ldr	r0, [pc, #216]	; (8000638 <display7SEG_1+0x240>)
 800055e:	f001 fdcc 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000562:	e064      	b.n	800062e <display7SEG_1+0x236>
	case 6:
		HAL_GPIO_WritePin(INPUTSEG0_1_GPIO_Port, INPUTSEG0_1_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056a:	4833      	ldr	r0, [pc, #204]	; (8000638 <display7SEG_1+0x240>)
 800056c:	f001 fdc5 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_2_GPIO_Port, INPUTSEG0_2_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4830      	ldr	r0, [pc, #192]	; (8000638 <display7SEG_1+0x240>)
 8000578:	f001 fdbf 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_3_GPIO_Port, INPUTSEG0_3_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000582:	482d      	ldr	r0, [pc, #180]	; (8000638 <display7SEG_1+0x240>)
 8000584:	f001 fdb9 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_4_GPIO_Port, INPUTSEG0_4_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058e:	482a      	ldr	r0, [pc, #168]	; (8000638 <display7SEG_1+0x240>)
 8000590:	f001 fdb3 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000594:	e04b      	b.n	800062e <display7SEG_1+0x236>
	case 7:
		HAL_GPIO_WritePin(INPUTSEG0_1_GPIO_Port, INPUTSEG0_1_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059c:	4826      	ldr	r0, [pc, #152]	; (8000638 <display7SEG_1+0x240>)
 800059e:	f001 fdac 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_2_GPIO_Port, INPUTSEG0_2_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a8:	4823      	ldr	r0, [pc, #140]	; (8000638 <display7SEG_1+0x240>)
 80005aa:	f001 fda6 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_3_GPIO_Port, INPUTSEG0_3_Pin, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b4:	4820      	ldr	r0, [pc, #128]	; (8000638 <display7SEG_1+0x240>)
 80005b6:	f001 fda0 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_4_GPIO_Port, INPUTSEG0_4_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c0:	481d      	ldr	r0, [pc, #116]	; (8000638 <display7SEG_1+0x240>)
 80005c2:	f001 fd9a 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80005c6:	e032      	b.n	800062e <display7SEG_1+0x236>
	case 8:
		HAL_GPIO_WritePin(INPUTSEG0_1_GPIO_Port, INPUTSEG0_1_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ce:	481a      	ldr	r0, [pc, #104]	; (8000638 <display7SEG_1+0x240>)
 80005d0:	f001 fd93 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_2_GPIO_Port, INPUTSEG0_2_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4817      	ldr	r0, [pc, #92]	; (8000638 <display7SEG_1+0x240>)
 80005dc:	f001 fd8d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_3_GPIO_Port, INPUTSEG0_3_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <display7SEG_1+0x240>)
 80005e8:	f001 fd87 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_4_GPIO_Port, INPUTSEG0_4_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f2:	4811      	ldr	r0, [pc, #68]	; (8000638 <display7SEG_1+0x240>)
 80005f4:	f001 fd81 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80005f8:	e019      	b.n	800062e <display7SEG_1+0x236>
	case 9:
		HAL_GPIO_WritePin(INPUTSEG0_1_GPIO_Port, INPUTSEG0_1_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <display7SEG_1+0x240>)
 8000602:	f001 fd7a 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_2_GPIO_Port, INPUTSEG0_2_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <display7SEG_1+0x240>)
 800060e:	f001 fd74 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_3_GPIO_Port, INPUTSEG0_3_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	4807      	ldr	r0, [pc, #28]	; (8000638 <display7SEG_1+0x240>)
 800061a:	f001 fd6e 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG0_4_GPIO_Port, INPUTSEG0_4_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <display7SEG_1+0x240>)
 8000626:	f001 fd68 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 800062a:	e000      	b.n	800062e <display7SEG_1+0x236>
	default:
		break;
 800062c:	bf00      	nop
	}
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40010800 	.word	0x40010800

0800063c <display7SEG_2>:
void display7SEG_2(int counter)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b09      	cmp	r3, #9
 8000648:	f200 80ea 	bhi.w	8000820 <display7SEG_2+0x1e4>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <display7SEG_2+0x18>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	0800067d 	.word	0x0800067d
 8000658:	080006a7 	.word	0x080006a7
 800065c:	080006d1 	.word	0x080006d1
 8000660:	080006fb 	.word	0x080006fb
 8000664:	08000725 	.word	0x08000725
 8000668:	0800074f 	.word	0x0800074f
 800066c:	08000779 	.word	0x08000779
 8000670:	080007a3 	.word	0x080007a3
 8000674:	080007cd 	.word	0x080007cd
 8000678:	080007f7 	.word	0x080007f7
	switch(counter)
	{
	case 0:
		HAL_GPIO_WritePin(INPUTSEG1_1_GPIO_Port, INPUTSEG1_1_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2101      	movs	r1, #1
 8000680:	486a      	ldr	r0, [pc, #424]	; (800082c <display7SEG_2+0x1f0>)
 8000682:	f001 fd3a 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_2_GPIO_Port, INPUTSEG1_2_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2102      	movs	r1, #2
 800068a:	4868      	ldr	r0, [pc, #416]	; (800082c <display7SEG_2+0x1f0>)
 800068c:	f001 fd35 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_3_GPIO_Port, INPUTSEG1_3_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2104      	movs	r1, #4
 8000694:	4865      	ldr	r0, [pc, #404]	; (800082c <display7SEG_2+0x1f0>)
 8000696:	f001 fd30 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_4_GPIO_Port, INPUTSEG1_4_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2108      	movs	r1, #8
 800069e:	4863      	ldr	r0, [pc, #396]	; (800082c <display7SEG_2+0x1f0>)
 80006a0:	f001 fd2b 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80006a4:	e0bd      	b.n	8000822 <display7SEG_2+0x1e6>
	case 1:
		HAL_GPIO_WritePin(INPUTSEG1_1_GPIO_Port, INPUTSEG1_1_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2101      	movs	r1, #1
 80006aa:	4860      	ldr	r0, [pc, #384]	; (800082c <display7SEG_2+0x1f0>)
 80006ac:	f001 fd25 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_2_GPIO_Port, INPUTSEG1_2_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2102      	movs	r1, #2
 80006b4:	485d      	ldr	r0, [pc, #372]	; (800082c <display7SEG_2+0x1f0>)
 80006b6:	f001 fd20 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_3_GPIO_Port, INPUTSEG1_3_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2104      	movs	r1, #4
 80006be:	485b      	ldr	r0, [pc, #364]	; (800082c <display7SEG_2+0x1f0>)
 80006c0:	f001 fd1b 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_4_GPIO_Port, INPUTSEG1_4_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2108      	movs	r1, #8
 80006c8:	4858      	ldr	r0, [pc, #352]	; (800082c <display7SEG_2+0x1f0>)
 80006ca:	f001 fd16 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80006ce:	e0a8      	b.n	8000822 <display7SEG_2+0x1e6>
	case 2:
		HAL_GPIO_WritePin(INPUTSEG1_1_GPIO_Port, INPUTSEG1_1_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2101      	movs	r1, #1
 80006d4:	4855      	ldr	r0, [pc, #340]	; (800082c <display7SEG_2+0x1f0>)
 80006d6:	f001 fd10 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_2_GPIO_Port, INPUTSEG1_2_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2102      	movs	r1, #2
 80006de:	4853      	ldr	r0, [pc, #332]	; (800082c <display7SEG_2+0x1f0>)
 80006e0:	f001 fd0b 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_3_GPIO_Port, INPUTSEG1_3_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2104      	movs	r1, #4
 80006e8:	4850      	ldr	r0, [pc, #320]	; (800082c <display7SEG_2+0x1f0>)
 80006ea:	f001 fd06 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_4_GPIO_Port, INPUTSEG1_4_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2108      	movs	r1, #8
 80006f2:	484e      	ldr	r0, [pc, #312]	; (800082c <display7SEG_2+0x1f0>)
 80006f4:	f001 fd01 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80006f8:	e093      	b.n	8000822 <display7SEG_2+0x1e6>
	case 3:
		HAL_GPIO_WritePin(INPUTSEG1_1_GPIO_Port, INPUTSEG1_1_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2101      	movs	r1, #1
 80006fe:	484b      	ldr	r0, [pc, #300]	; (800082c <display7SEG_2+0x1f0>)
 8000700:	f001 fcfb 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_2_GPIO_Port, INPUTSEG1_2_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2102      	movs	r1, #2
 8000708:	4848      	ldr	r0, [pc, #288]	; (800082c <display7SEG_2+0x1f0>)
 800070a:	f001 fcf6 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_3_GPIO_Port, INPUTSEG1_3_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2104      	movs	r1, #4
 8000712:	4846      	ldr	r0, [pc, #280]	; (800082c <display7SEG_2+0x1f0>)
 8000714:	f001 fcf1 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_4_GPIO_Port, INPUTSEG1_4_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2108      	movs	r1, #8
 800071c:	4843      	ldr	r0, [pc, #268]	; (800082c <display7SEG_2+0x1f0>)
 800071e:	f001 fcec 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000722:	e07e      	b.n	8000822 <display7SEG_2+0x1e6>
	case 4:
		HAL_GPIO_WritePin(INPUTSEG1_1_GPIO_Port, INPUTSEG1_1_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2101      	movs	r1, #1
 8000728:	4840      	ldr	r0, [pc, #256]	; (800082c <display7SEG_2+0x1f0>)
 800072a:	f001 fce6 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_2_GPIO_Port, INPUTSEG1_2_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2102      	movs	r1, #2
 8000732:	483e      	ldr	r0, [pc, #248]	; (800082c <display7SEG_2+0x1f0>)
 8000734:	f001 fce1 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_3_GPIO_Port, INPUTSEG1_3_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2104      	movs	r1, #4
 800073c:	483b      	ldr	r0, [pc, #236]	; (800082c <display7SEG_2+0x1f0>)
 800073e:	f001 fcdc 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_4_GPIO_Port, INPUTSEG1_4_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2108      	movs	r1, #8
 8000746:	4839      	ldr	r0, [pc, #228]	; (800082c <display7SEG_2+0x1f0>)
 8000748:	f001 fcd7 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 800074c:	e069      	b.n	8000822 <display7SEG_2+0x1e6>
	case 5:
		HAL_GPIO_WritePin(INPUTSEG1_1_GPIO_Port, INPUTSEG1_1_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2101      	movs	r1, #1
 8000752:	4836      	ldr	r0, [pc, #216]	; (800082c <display7SEG_2+0x1f0>)
 8000754:	f001 fcd1 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_2_GPIO_Port, INPUTSEG1_2_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2102      	movs	r1, #2
 800075c:	4833      	ldr	r0, [pc, #204]	; (800082c <display7SEG_2+0x1f0>)
 800075e:	f001 fccc 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_3_GPIO_Port, INPUTSEG1_3_Pin, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2104      	movs	r1, #4
 8000766:	4831      	ldr	r0, [pc, #196]	; (800082c <display7SEG_2+0x1f0>)
 8000768:	f001 fcc7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_4_GPIO_Port, INPUTSEG1_4_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2108      	movs	r1, #8
 8000770:	482e      	ldr	r0, [pc, #184]	; (800082c <display7SEG_2+0x1f0>)
 8000772:	f001 fcc2 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000776:	e054      	b.n	8000822 <display7SEG_2+0x1e6>
	case 6:
		HAL_GPIO_WritePin(INPUTSEG1_1_GPIO_Port, INPUTSEG1_1_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2101      	movs	r1, #1
 800077c:	482b      	ldr	r0, [pc, #172]	; (800082c <display7SEG_2+0x1f0>)
 800077e:	f001 fcbc 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_2_GPIO_Port, INPUTSEG1_2_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2102      	movs	r1, #2
 8000786:	4829      	ldr	r0, [pc, #164]	; (800082c <display7SEG_2+0x1f0>)
 8000788:	f001 fcb7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_3_GPIO_Port, INPUTSEG1_3_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2104      	movs	r1, #4
 8000790:	4826      	ldr	r0, [pc, #152]	; (800082c <display7SEG_2+0x1f0>)
 8000792:	f001 fcb2 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_4_GPIO_Port, INPUTSEG1_4_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2108      	movs	r1, #8
 800079a:	4824      	ldr	r0, [pc, #144]	; (800082c <display7SEG_2+0x1f0>)
 800079c:	f001 fcad 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80007a0:	e03f      	b.n	8000822 <display7SEG_2+0x1e6>
	case 7:
		HAL_GPIO_WritePin(INPUTSEG1_1_GPIO_Port, INPUTSEG1_1_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2101      	movs	r1, #1
 80007a6:	4821      	ldr	r0, [pc, #132]	; (800082c <display7SEG_2+0x1f0>)
 80007a8:	f001 fca7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_2_GPIO_Port, INPUTSEG1_2_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2102      	movs	r1, #2
 80007b0:	481e      	ldr	r0, [pc, #120]	; (800082c <display7SEG_2+0x1f0>)
 80007b2:	f001 fca2 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_3_GPIO_Port, INPUTSEG1_3_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2104      	movs	r1, #4
 80007ba:	481c      	ldr	r0, [pc, #112]	; (800082c <display7SEG_2+0x1f0>)
 80007bc:	f001 fc9d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_4_GPIO_Port, INPUTSEG1_4_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2108      	movs	r1, #8
 80007c4:	4819      	ldr	r0, [pc, #100]	; (800082c <display7SEG_2+0x1f0>)
 80007c6:	f001 fc98 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80007ca:	e02a      	b.n	8000822 <display7SEG_2+0x1e6>
	case 8:
		HAL_GPIO_WritePin(INPUTSEG1_1_GPIO_Port, INPUTSEG1_1_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2101      	movs	r1, #1
 80007d0:	4816      	ldr	r0, [pc, #88]	; (800082c <display7SEG_2+0x1f0>)
 80007d2:	f001 fc92 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_2_GPIO_Port, INPUTSEG1_2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2102      	movs	r1, #2
 80007da:	4814      	ldr	r0, [pc, #80]	; (800082c <display7SEG_2+0x1f0>)
 80007dc:	f001 fc8d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_3_GPIO_Port, INPUTSEG1_3_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <display7SEG_2+0x1f0>)
 80007e6:	f001 fc88 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_4_GPIO_Port, INPUTSEG1_4_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2108      	movs	r1, #8
 80007ee:	480f      	ldr	r0, [pc, #60]	; (800082c <display7SEG_2+0x1f0>)
 80007f0:	f001 fc83 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80007f4:	e015      	b.n	8000822 <display7SEG_2+0x1e6>
	case 9:
		HAL_GPIO_WritePin(INPUTSEG1_1_GPIO_Port, INPUTSEG1_1_Pin, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2101      	movs	r1, #1
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <display7SEG_2+0x1f0>)
 80007fc:	f001 fc7d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_2_GPIO_Port, INPUTSEG1_2_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2102      	movs	r1, #2
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <display7SEG_2+0x1f0>)
 8000806:	f001 fc78 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_3_GPIO_Port, INPUTSEG1_3_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2104      	movs	r1, #4
 800080e:	4807      	ldr	r0, [pc, #28]	; (800082c <display7SEG_2+0x1f0>)
 8000810:	f001 fc73 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG1_4_GPIO_Port, INPUTSEG1_4_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	2108      	movs	r1, #8
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <display7SEG_2+0x1f0>)
 800081a:	f001 fc6e 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 800081e:	e000      	b.n	8000822 <display7SEG_2+0x1e6>
	default:
		break;
 8000820:	bf00      	nop
	}
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40010c00 	.word	0x40010c00

08000830 <display7SEG_3>:
void display7SEG_3(int counter)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b09      	cmp	r3, #9
 800083c:	f200 80ea 	bhi.w	8000a14 <display7SEG_3+0x1e4>
 8000840:	a201      	add	r2, pc, #4	; (adr r2, 8000848 <display7SEG_3+0x18>)
 8000842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000846:	bf00      	nop
 8000848:	08000871 	.word	0x08000871
 800084c:	0800089b 	.word	0x0800089b
 8000850:	080008c5 	.word	0x080008c5
 8000854:	080008ef 	.word	0x080008ef
 8000858:	08000919 	.word	0x08000919
 800085c:	08000943 	.word	0x08000943
 8000860:	0800096d 	.word	0x0800096d
 8000864:	08000997 	.word	0x08000997
 8000868:	080009c1 	.word	0x080009c1
 800086c:	080009eb 	.word	0x080009eb
	switch(counter)
	{
	case 0:
		HAL_GPIO_WritePin(INPUTSEG2_1_GPIO_Port, INPUTSEG2_1_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2110      	movs	r1, #16
 8000874:	486a      	ldr	r0, [pc, #424]	; (8000a20 <display7SEG_3+0x1f0>)
 8000876:	f001 fc40 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_2_GPIO_Port, INPUTSEG2_2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	4868      	ldr	r0, [pc, #416]	; (8000a20 <display7SEG_3+0x1f0>)
 8000880:	f001 fc3b 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_3_GPIO_Port, INPUTSEG2_3_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	4865      	ldr	r0, [pc, #404]	; (8000a20 <display7SEG_3+0x1f0>)
 800088a:	f001 fc36 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_4_GPIO_Port, INPUTSEG2_4_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	4863      	ldr	r0, [pc, #396]	; (8000a20 <display7SEG_3+0x1f0>)
 8000894:	f001 fc31 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000898:	e0bd      	b.n	8000a16 <display7SEG_3+0x1e6>
	case 1:
		HAL_GPIO_WritePin(INPUTSEG2_1_GPIO_Port, INPUTSEG2_1_Pin, GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	2110      	movs	r1, #16
 800089e:	4860      	ldr	r0, [pc, #384]	; (8000a20 <display7SEG_3+0x1f0>)
 80008a0:	f001 fc2b 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_2_GPIO_Port, INPUTSEG2_2_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	485d      	ldr	r0, [pc, #372]	; (8000a20 <display7SEG_3+0x1f0>)
 80008aa:	f001 fc26 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_3_GPIO_Port, INPUTSEG2_3_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	485b      	ldr	r0, [pc, #364]	; (8000a20 <display7SEG_3+0x1f0>)
 80008b4:	f001 fc21 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_4_GPIO_Port, INPUTSEG2_4_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2180      	movs	r1, #128	; 0x80
 80008bc:	4858      	ldr	r0, [pc, #352]	; (8000a20 <display7SEG_3+0x1f0>)
 80008be:	f001 fc1c 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80008c2:	e0a8      	b.n	8000a16 <display7SEG_3+0x1e6>
	case 2:
		HAL_GPIO_WritePin(INPUTSEG2_1_GPIO_Port, INPUTSEG2_1_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2110      	movs	r1, #16
 80008c8:	4855      	ldr	r0, [pc, #340]	; (8000a20 <display7SEG_3+0x1f0>)
 80008ca:	f001 fc16 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_2_GPIO_Port, INPUTSEG2_2_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2120      	movs	r1, #32
 80008d2:	4853      	ldr	r0, [pc, #332]	; (8000a20 <display7SEG_3+0x1f0>)
 80008d4:	f001 fc11 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_3_GPIO_Port, INPUTSEG2_3_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	4850      	ldr	r0, [pc, #320]	; (8000a20 <display7SEG_3+0x1f0>)
 80008de:	f001 fc0c 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_4_GPIO_Port, INPUTSEG2_4_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	484e      	ldr	r0, [pc, #312]	; (8000a20 <display7SEG_3+0x1f0>)
 80008e8:	f001 fc07 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80008ec:	e093      	b.n	8000a16 <display7SEG_3+0x1e6>
	case 3:
		HAL_GPIO_WritePin(INPUTSEG2_1_GPIO_Port, INPUTSEG2_1_Pin, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2110      	movs	r1, #16
 80008f2:	484b      	ldr	r0, [pc, #300]	; (8000a20 <display7SEG_3+0x1f0>)
 80008f4:	f001 fc01 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_2_GPIO_Port, INPUTSEG2_2_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2120      	movs	r1, #32
 80008fc:	4848      	ldr	r0, [pc, #288]	; (8000a20 <display7SEG_3+0x1f0>)
 80008fe:	f001 fbfc 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_3_GPIO_Port, INPUTSEG2_3_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	4846      	ldr	r0, [pc, #280]	; (8000a20 <display7SEG_3+0x1f0>)
 8000908:	f001 fbf7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_4_GPIO_Port, INPUTSEG2_4_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	4843      	ldr	r0, [pc, #268]	; (8000a20 <display7SEG_3+0x1f0>)
 8000912:	f001 fbf2 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000916:	e07e      	b.n	8000a16 <display7SEG_3+0x1e6>
	case 4:
		HAL_GPIO_WritePin(INPUTSEG2_1_GPIO_Port, INPUTSEG2_1_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2110      	movs	r1, #16
 800091c:	4840      	ldr	r0, [pc, #256]	; (8000a20 <display7SEG_3+0x1f0>)
 800091e:	f001 fbec 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_2_GPIO_Port, INPUTSEG2_2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	483e      	ldr	r0, [pc, #248]	; (8000a20 <display7SEG_3+0x1f0>)
 8000928:	f001 fbe7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_3_GPIO_Port, INPUTSEG2_3_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	483b      	ldr	r0, [pc, #236]	; (8000a20 <display7SEG_3+0x1f0>)
 8000932:	f001 fbe2 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_4_GPIO_Port, INPUTSEG2_4_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	4839      	ldr	r0, [pc, #228]	; (8000a20 <display7SEG_3+0x1f0>)
 800093c:	f001 fbdd 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000940:	e069      	b.n	8000a16 <display7SEG_3+0x1e6>
	case 5:
		HAL_GPIO_WritePin(INPUTSEG2_1_GPIO_Port, INPUTSEG2_1_Pin, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2110      	movs	r1, #16
 8000946:	4836      	ldr	r0, [pc, #216]	; (8000a20 <display7SEG_3+0x1f0>)
 8000948:	f001 fbd7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_2_GPIO_Port, INPUTSEG2_2_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2120      	movs	r1, #32
 8000950:	4833      	ldr	r0, [pc, #204]	; (8000a20 <display7SEG_3+0x1f0>)
 8000952:	f001 fbd2 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_3_GPIO_Port, INPUTSEG2_3_Pin, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	4831      	ldr	r0, [pc, #196]	; (8000a20 <display7SEG_3+0x1f0>)
 800095c:	f001 fbcd 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_4_GPIO_Port, INPUTSEG2_4_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	482e      	ldr	r0, [pc, #184]	; (8000a20 <display7SEG_3+0x1f0>)
 8000966:	f001 fbc8 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 800096a:	e054      	b.n	8000a16 <display7SEG_3+0x1e6>
	case 6:
		HAL_GPIO_WritePin(INPUTSEG2_1_GPIO_Port, INPUTSEG2_1_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2110      	movs	r1, #16
 8000970:	482b      	ldr	r0, [pc, #172]	; (8000a20 <display7SEG_3+0x1f0>)
 8000972:	f001 fbc2 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_2_GPIO_Port, INPUTSEG2_2_Pin, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	2120      	movs	r1, #32
 800097a:	4829      	ldr	r0, [pc, #164]	; (8000a20 <display7SEG_3+0x1f0>)
 800097c:	f001 fbbd 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_3_GPIO_Port, INPUTSEG2_3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2140      	movs	r1, #64	; 0x40
 8000984:	4826      	ldr	r0, [pc, #152]	; (8000a20 <display7SEG_3+0x1f0>)
 8000986:	f001 fbb8 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_4_GPIO_Port, INPUTSEG2_4_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	4824      	ldr	r0, [pc, #144]	; (8000a20 <display7SEG_3+0x1f0>)
 8000990:	f001 fbb3 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000994:	e03f      	b.n	8000a16 <display7SEG_3+0x1e6>
	case 7:
		HAL_GPIO_WritePin(INPUTSEG2_1_GPIO_Port, INPUTSEG2_1_Pin, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	2110      	movs	r1, #16
 800099a:	4821      	ldr	r0, [pc, #132]	; (8000a20 <display7SEG_3+0x1f0>)
 800099c:	f001 fbad 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_2_GPIO_Port, INPUTSEG2_2_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2120      	movs	r1, #32
 80009a4:	481e      	ldr	r0, [pc, #120]	; (8000a20 <display7SEG_3+0x1f0>)
 80009a6:	f001 fba8 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_3_GPIO_Port, INPUTSEG2_3_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	481c      	ldr	r0, [pc, #112]	; (8000a20 <display7SEG_3+0x1f0>)
 80009b0:	f001 fba3 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_4_GPIO_Port, INPUTSEG2_4_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	4819      	ldr	r0, [pc, #100]	; (8000a20 <display7SEG_3+0x1f0>)
 80009ba:	f001 fb9e 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80009be:	e02a      	b.n	8000a16 <display7SEG_3+0x1e6>
	case 8:
		HAL_GPIO_WritePin(INPUTSEG2_1_GPIO_Port, INPUTSEG2_1_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	4816      	ldr	r0, [pc, #88]	; (8000a20 <display7SEG_3+0x1f0>)
 80009c6:	f001 fb98 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_2_GPIO_Port, INPUTSEG2_2_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2120      	movs	r1, #32
 80009ce:	4814      	ldr	r0, [pc, #80]	; (8000a20 <display7SEG_3+0x1f0>)
 80009d0:	f001 fb93 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_3_GPIO_Port, INPUTSEG2_3_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2140      	movs	r1, #64	; 0x40
 80009d8:	4811      	ldr	r0, [pc, #68]	; (8000a20 <display7SEG_3+0x1f0>)
 80009da:	f001 fb8e 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_4_GPIO_Port, INPUTSEG2_4_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <display7SEG_3+0x1f0>)
 80009e4:	f001 fb89 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 80009e8:	e015      	b.n	8000a16 <display7SEG_3+0x1e6>
	case 9:
		HAL_GPIO_WritePin(INPUTSEG2_1_GPIO_Port, INPUTSEG2_1_Pin, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2110      	movs	r1, #16
 80009ee:	480c      	ldr	r0, [pc, #48]	; (8000a20 <display7SEG_3+0x1f0>)
 80009f0:	f001 fb83 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_2_GPIO_Port, INPUTSEG2_2_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2120      	movs	r1, #32
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <display7SEG_3+0x1f0>)
 80009fa:	f001 fb7e 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_3_GPIO_Port, INPUTSEG2_3_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <display7SEG_3+0x1f0>)
 8000a04:	f001 fb79 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG2_4_GPIO_Port, INPUTSEG2_4_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <display7SEG_3+0x1f0>)
 8000a0e:	f001 fb74 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000a12:	e000      	b.n	8000a16 <display7SEG_3+0x1e6>
	default:
		break;
 8000a14:	bf00      	nop
	}
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40010c00 	.word	0x40010c00

08000a24 <display7SEG_4>:
void display7SEG_4(int counter)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b09      	cmp	r3, #9
 8000a30:	f200 8112 	bhi.w	8000c58 <display7SEG_4+0x234>
 8000a34:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <display7SEG_4+0x18>)
 8000a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3a:	bf00      	nop
 8000a3c:	08000a65 	.word	0x08000a65
 8000a40:	08000a97 	.word	0x08000a97
 8000a44:	08000ac9 	.word	0x08000ac9
 8000a48:	08000afb 	.word	0x08000afb
 8000a4c:	08000b2d 	.word	0x08000b2d
 8000a50:	08000b5f 	.word	0x08000b5f
 8000a54:	08000b91 	.word	0x08000b91
 8000a58:	08000bc3 	.word	0x08000bc3
 8000a5c:	08000bf5 	.word	0x08000bf5
 8000a60:	08000c27 	.word	0x08000c27
	switch(counter)
	{
	case 0:
		HAL_GPIO_WritePin(INPUTSEG3_1_GPIO_Port, INPUTSEG3_1_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6a:	487e      	ldr	r0, [pc, #504]	; (8000c64 <display7SEG_4+0x240>)
 8000a6c:	f001 fb45 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_2_GPIO_Port, INPUTSEG3_2_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a76:	487b      	ldr	r0, [pc, #492]	; (8000c64 <display7SEG_4+0x240>)
 8000a78:	f001 fb3f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_3_GPIO_Port, INPUTSEG3_3_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a82:	4878      	ldr	r0, [pc, #480]	; (8000c64 <display7SEG_4+0x240>)
 8000a84:	f001 fb39 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_4_GPIO_Port, INPUTSEG3_4_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a8e:	4875      	ldr	r0, [pc, #468]	; (8000c64 <display7SEG_4+0x240>)
 8000a90:	f001 fb33 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000a94:	e0e1      	b.n	8000c5a <display7SEG_4+0x236>
	case 1:
		HAL_GPIO_WritePin(INPUTSEG3_1_GPIO_Port, INPUTSEG3_1_Pin, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	4871      	ldr	r0, [pc, #452]	; (8000c64 <display7SEG_4+0x240>)
 8000a9e:	f001 fb2c 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_2_GPIO_Port, INPUTSEG3_2_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa8:	486e      	ldr	r0, [pc, #440]	; (8000c64 <display7SEG_4+0x240>)
 8000aaa:	f001 fb26 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_3_GPIO_Port, INPUTSEG3_3_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab4:	486b      	ldr	r0, [pc, #428]	; (8000c64 <display7SEG_4+0x240>)
 8000ab6:	f001 fb20 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_4_GPIO_Port, INPUTSEG3_4_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac0:	4868      	ldr	r0, [pc, #416]	; (8000c64 <display7SEG_4+0x240>)
 8000ac2:	f001 fb1a 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000ac6:	e0c8      	b.n	8000c5a <display7SEG_4+0x236>
	case 2:
		HAL_GPIO_WritePin(INPUTSEG3_1_GPIO_Port, INPUTSEG3_1_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ace:	4865      	ldr	r0, [pc, #404]	; (8000c64 <display7SEG_4+0x240>)
 8000ad0:	f001 fb13 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_2_GPIO_Port, INPUTSEG3_2_Pin, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	4862      	ldr	r0, [pc, #392]	; (8000c64 <display7SEG_4+0x240>)
 8000adc:	f001 fb0d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_3_GPIO_Port, INPUTSEG3_3_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae6:	485f      	ldr	r0, [pc, #380]	; (8000c64 <display7SEG_4+0x240>)
 8000ae8:	f001 fb07 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_4_GPIO_Port, INPUTSEG3_4_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af2:	485c      	ldr	r0, [pc, #368]	; (8000c64 <display7SEG_4+0x240>)
 8000af4:	f001 fb01 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000af8:	e0af      	b.n	8000c5a <display7SEG_4+0x236>
	case 3:
		HAL_GPIO_WritePin(INPUTSEG3_1_GPIO_Port, INPUTSEG3_1_Pin, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b00:	4858      	ldr	r0, [pc, #352]	; (8000c64 <display7SEG_4+0x240>)
 8000b02:	f001 fafa 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_2_GPIO_Port, INPUTSEG3_2_Pin, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0c:	4855      	ldr	r0, [pc, #340]	; (8000c64 <display7SEG_4+0x240>)
 8000b0e:	f001 faf4 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_3_GPIO_Port, INPUTSEG3_3_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b18:	4852      	ldr	r0, [pc, #328]	; (8000c64 <display7SEG_4+0x240>)
 8000b1a:	f001 faee 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_4_GPIO_Port, INPUTSEG3_4_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b24:	484f      	ldr	r0, [pc, #316]	; (8000c64 <display7SEG_4+0x240>)
 8000b26:	f001 fae8 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000b2a:	e096      	b.n	8000c5a <display7SEG_4+0x236>
	case 4:
		HAL_GPIO_WritePin(INPUTSEG3_1_GPIO_Port, INPUTSEG3_1_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b32:	484c      	ldr	r0, [pc, #304]	; (8000c64 <display7SEG_4+0x240>)
 8000b34:	f001 fae1 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_2_GPIO_Port, INPUTSEG3_2_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b3e:	4849      	ldr	r0, [pc, #292]	; (8000c64 <display7SEG_4+0x240>)
 8000b40:	f001 fadb 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_3_GPIO_Port, INPUTSEG3_3_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4a:	4846      	ldr	r0, [pc, #280]	; (8000c64 <display7SEG_4+0x240>)
 8000b4c:	f001 fad5 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_4_GPIO_Port, INPUTSEG3_4_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b56:	4843      	ldr	r0, [pc, #268]	; (8000c64 <display7SEG_4+0x240>)
 8000b58:	f001 facf 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000b5c:	e07d      	b.n	8000c5a <display7SEG_4+0x236>
	case 5:
		HAL_GPIO_WritePin(INPUTSEG3_1_GPIO_Port, INPUTSEG3_1_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b64:	483f      	ldr	r0, [pc, #252]	; (8000c64 <display7SEG_4+0x240>)
 8000b66:	f001 fac8 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_2_GPIO_Port, INPUTSEG3_2_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	483c      	ldr	r0, [pc, #240]	; (8000c64 <display7SEG_4+0x240>)
 8000b72:	f001 fac2 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_3_GPIO_Port, INPUTSEG3_3_Pin, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7c:	4839      	ldr	r0, [pc, #228]	; (8000c64 <display7SEG_4+0x240>)
 8000b7e:	f001 fabc 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_4_GPIO_Port, INPUTSEG3_4_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b88:	4836      	ldr	r0, [pc, #216]	; (8000c64 <display7SEG_4+0x240>)
 8000b8a:	f001 fab6 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000b8e:	e064      	b.n	8000c5a <display7SEG_4+0x236>
	case 6:
		HAL_GPIO_WritePin(INPUTSEG3_1_GPIO_Port, INPUTSEG3_1_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b96:	4833      	ldr	r0, [pc, #204]	; (8000c64 <display7SEG_4+0x240>)
 8000b98:	f001 faaf 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_2_GPIO_Port, INPUTSEG3_2_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	4830      	ldr	r0, [pc, #192]	; (8000c64 <display7SEG_4+0x240>)
 8000ba4:	f001 faa9 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_3_GPIO_Port, INPUTSEG3_3_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bae:	482d      	ldr	r0, [pc, #180]	; (8000c64 <display7SEG_4+0x240>)
 8000bb0:	f001 faa3 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_4_GPIO_Port, INPUTSEG3_4_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bba:	482a      	ldr	r0, [pc, #168]	; (8000c64 <display7SEG_4+0x240>)
 8000bbc:	f001 fa9d 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000bc0:	e04b      	b.n	8000c5a <display7SEG_4+0x236>
	case 7:
		HAL_GPIO_WritePin(INPUTSEG3_1_GPIO_Port, INPUTSEG3_1_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc8:	4826      	ldr	r0, [pc, #152]	; (8000c64 <display7SEG_4+0x240>)
 8000bca:	f001 fa96 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_2_GPIO_Port, INPUTSEG3_2_Pin, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd4:	4823      	ldr	r0, [pc, #140]	; (8000c64 <display7SEG_4+0x240>)
 8000bd6:	f001 fa90 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_3_GPIO_Port, INPUTSEG3_3_Pin, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be0:	4820      	ldr	r0, [pc, #128]	; (8000c64 <display7SEG_4+0x240>)
 8000be2:	f001 fa8a 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_4_GPIO_Port, INPUTSEG3_4_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bec:	481d      	ldr	r0, [pc, #116]	; (8000c64 <display7SEG_4+0x240>)
 8000bee:	f001 fa84 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000bf2:	e032      	b.n	8000c5a <display7SEG_4+0x236>
	case 8:
		HAL_GPIO_WritePin(INPUTSEG3_1_GPIO_Port, INPUTSEG3_1_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	481a      	ldr	r0, [pc, #104]	; (8000c64 <display7SEG_4+0x240>)
 8000bfc:	f001 fa7d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_2_GPIO_Port, INPUTSEG3_2_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c06:	4817      	ldr	r0, [pc, #92]	; (8000c64 <display7SEG_4+0x240>)
 8000c08:	f001 fa77 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_3_GPIO_Port, INPUTSEG3_3_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c12:	4814      	ldr	r0, [pc, #80]	; (8000c64 <display7SEG_4+0x240>)
 8000c14:	f001 fa71 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_4_GPIO_Port, INPUTSEG3_4_Pin, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1e:	4811      	ldr	r0, [pc, #68]	; (8000c64 <display7SEG_4+0x240>)
 8000c20:	f001 fa6b 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000c24:	e019      	b.n	8000c5a <display7SEG_4+0x236>
	case 9:
		HAL_GPIO_WritePin(INPUTSEG3_1_GPIO_Port, INPUTSEG3_1_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <display7SEG_4+0x240>)
 8000c2e:	f001 fa64 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_2_GPIO_Port, INPUTSEG3_2_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c38:	480a      	ldr	r0, [pc, #40]	; (8000c64 <display7SEG_4+0x240>)
 8000c3a:	f001 fa5e 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_3_GPIO_Port, INPUTSEG3_3_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c44:	4807      	ldr	r0, [pc, #28]	; (8000c64 <display7SEG_4+0x240>)
 8000c46:	f001 fa58 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUTSEG3_4_GPIO_Port, INPUTSEG3_4_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <display7SEG_4+0x240>)
 8000c52:	f001 fa52 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000c56:	e000      	b.n	8000c5a <display7SEG_4+0x236>
	default:
		break;
 8000c58:	bf00      	nop
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40010c00 	.word	0x40010c00

08000c68 <display7SEG_mode>:

void display7SEG_mode(int counter)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d86f      	bhi.n	8000d58 <display7SEG_mode+0xf0>
 8000c78:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <display7SEG_mode+0x18>)
 8000c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7e:	bf00      	nop
 8000c80:	08000c91 	.word	0x08000c91
 8000c84:	08000cc3 	.word	0x08000cc3
 8000c88:	08000cf5 	.word	0x08000cf5
 8000c8c:	08000d27 	.word	0x08000d27
	switch(counter)
	{
	case 1:
		HAL_GPIO_WritePin(MODE_1_GPIO_Port, MODE_1_Pin, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c96:	4833      	ldr	r0, [pc, #204]	; (8000d64 <display7SEG_mode+0xfc>)
 8000c98:	f001 fa2f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_2_GPIO_Port, MODE_2_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4830      	ldr	r0, [pc, #192]	; (8000d64 <display7SEG_mode+0xfc>)
 8000ca4:	f001 fa29 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_3_GPIO_Port, MODE_3_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cae:	482d      	ldr	r0, [pc, #180]	; (8000d64 <display7SEG_mode+0xfc>)
 8000cb0:	f001 fa23 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_4_GPIO_Port, MODE_4_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cba:	482a      	ldr	r0, [pc, #168]	; (8000d64 <display7SEG_mode+0xfc>)
 8000cbc:	f001 fa1d 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000cc0:	e04b      	b.n	8000d5a <display7SEG_mode+0xf2>
	case 2:
		HAL_GPIO_WritePin(MODE_1_GPIO_Port, MODE_1_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc8:	4826      	ldr	r0, [pc, #152]	; (8000d64 <display7SEG_mode+0xfc>)
 8000cca:	f001 fa16 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_2_GPIO_Port, MODE_2_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd4:	4823      	ldr	r0, [pc, #140]	; (8000d64 <display7SEG_mode+0xfc>)
 8000cd6:	f001 fa10 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_3_GPIO_Port, MODE_3_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce0:	4820      	ldr	r0, [pc, #128]	; (8000d64 <display7SEG_mode+0xfc>)
 8000ce2:	f001 fa0a 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_4_GPIO_Port, MODE_4_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cec:	481d      	ldr	r0, [pc, #116]	; (8000d64 <display7SEG_mode+0xfc>)
 8000cee:	f001 fa04 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000cf2:	e032      	b.n	8000d5a <display7SEG_mode+0xf2>
	case 3:
		HAL_GPIO_WritePin(MODE_1_GPIO_Port, MODE_1_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfa:	481a      	ldr	r0, [pc, #104]	; (8000d64 <display7SEG_mode+0xfc>)
 8000cfc:	f001 f9fd 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_2_GPIO_Port, MODE_2_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d06:	4817      	ldr	r0, [pc, #92]	; (8000d64 <display7SEG_mode+0xfc>)
 8000d08:	f001 f9f7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_3_GPIO_Port, MODE_3_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <display7SEG_mode+0xfc>)
 8000d14:	f001 f9f1 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_4_GPIO_Port, MODE_4_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <display7SEG_mode+0xfc>)
 8000d20:	f001 f9eb 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000d24:	e019      	b.n	8000d5a <display7SEG_mode+0xf2>
	case 4:
		HAL_GPIO_WritePin(MODE_1_GPIO_Port, MODE_1_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <display7SEG_mode+0xfc>)
 8000d2e:	f001 f9e4 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_2_GPIO_Port, MODE_2_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d38:	480a      	ldr	r0, [pc, #40]	; (8000d64 <display7SEG_mode+0xfc>)
 8000d3a:	f001 f9de 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_3_GPIO_Port, MODE_3_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d44:	4807      	ldr	r0, [pc, #28]	; (8000d64 <display7SEG_mode+0xfc>)
 8000d46:	f001 f9d8 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_4_GPIO_Port, MODE_4_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <display7SEG_mode+0xfc>)
 8000d52:	f001 f9d2 	bl	80020fa <HAL_GPIO_WritePin>
		break;
 8000d56:	e000      	b.n	8000d5a <display7SEG_mode+0xf2>
	default:
		break;
 8000d58:	bf00      	nop
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010c00 	.word	0x40010c00

08000d68 <fsm_for_input_processing>:
int Light_state_BT;
int value_time_light = 0;
int value_mode=1;
int status=1;
void fsm_for_input_processing ( void )
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	switch(status){
 8000d6c:	4b74      	ldr	r3, [pc, #464]	; (8000f40 <fsm_for_input_processing+0x1d8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	f200 8243 	bhi.w	80011fe <fsm_for_input_processing+0x496>
 8000d78:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <fsm_for_input_processing+0x18>)
 8000d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7e:	bf00      	nop
 8000d80:	08000d91 	.word	0x08000d91
 8000d84:	08000df1 	.word	0x08000df1
 8000d88:	08000f65 	.word	0x08000f65
 8000d8c:	080010b3 	.word	0x080010b3
	case 1: //MODE1
		//process
		if(timer0_flag == 1){
 8000d90:	4b6c      	ldr	r3, [pc, #432]	; (8000f44 <fsm_for_input_processing+0x1dc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d10c      	bne.n	8000db2 <fsm_for_input_processing+0x4a>
			Traffic_Light_Update_12();
 8000d98:	f000 fcda 	bl	8001750 <Traffic_Light_Update_12>
			Traffic_Light_Update_34();
 8000d9c:	f000 fdae 	bl	80018fc <Traffic_Light_Update_34>
			display7SEG_mode(value_mode);
 8000da0:	4b69      	ldr	r3, [pc, #420]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5f 	bl	8000c68 <display7SEG_mode>
			setTimer0(100);
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f000 fb64 	bl	8001478 <setTimer0>
			break;
 8000db0:	e22e      	b.n	8001210 <fsm_for_input_processing+0x4a8>
		}
		//change status
		if(isBUTTON1Pressed()==1){
 8000db2:	f7ff f9cb 	bl	800014c <isBUTTON1Pressed>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	f040 8222 	bne.w	8001202 <fsm_for_input_processing+0x49a>
			value_mode++;
 8000dbe:	4b62      	ldr	r3, [pc, #392]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a60      	ldr	r2, [pc, #384]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000dc6:	6013      	str	r3, [r2, #0]
			display7SEG_mode(value_mode);
 8000dc8:	4b5f      	ldr	r3, [pc, #380]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff4b 	bl	8000c68 <display7SEG_mode>
			if(value_mode>4) value_mode=1;
 8000dd2:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	dd02      	ble.n	8000de0 <fsm_for_input_processing+0x78>
 8000dda:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
			status=value_mode;
 8000de0:	4b59      	ldr	r3, [pc, #356]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a56      	ldr	r2, [pc, #344]	; (8000f40 <fsm_for_input_processing+0x1d8>)
 8000de6:	6013      	str	r3, [r2, #0]
			setTimer0(50);
 8000de8:	2032      	movs	r0, #50	; 0x32
 8000dea:	f000 fb45 	bl	8001478 <setTimer0>
		}
		break;
 8000dee:	e208      	b.n	8001202 <fsm_for_input_processing+0x49a>
	case 2://MODE2
		//display
		if(timer0_flag == 1){
 8000df0:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <fsm_for_input_processing+0x1dc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d124      	bne.n	8000e42 <fsm_for_input_processing+0xda>
			display7SEG_mode(value_mode);
 8000df8:	4b53      	ldr	r3, [pc, #332]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff33 	bl	8000c68 <display7SEG_mode>
			HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin );
 8000e02:	2108      	movs	r1, #8
 8000e04:	4851      	ldr	r0, [pc, #324]	; (8000f4c <fsm_for_input_processing+0x1e4>)
 8000e06:	f001 f990 	bl	800212a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin );
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	484f      	ldr	r0, [pc, #316]	; (8000f4c <fsm_for_input_processing+0x1e4>)
 8000e0e:	f001 f98c 	bl	800212a <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2120      	movs	r1, #32
 8000e16:	484d      	ldr	r0, [pc, #308]	; (8000f4c <fsm_for_input_processing+0x1e4>)
 8000e18:	f001 f96f 	bl	80020fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e22:	484a      	ldr	r0, [pc, #296]	; (8000f4c <fsm_for_input_processing+0x1e4>)
 8000e24:	f001 f969 	bl	80020fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4847      	ldr	r0, [pc, #284]	; (8000f4c <fsm_for_input_processing+0x1e4>)
 8000e2e:	f001 f964 	bl	80020fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	4845      	ldr	r0, [pc, #276]	; (8000f4c <fsm_for_input_processing+0x1e4>)
 8000e38:	f001 f95f 	bl	80020fa <HAL_GPIO_WritePin>
			setTimer0(50);
 8000e3c:	2032      	movs	r0, #50	; 0x32
 8000e3e:	f000 fb1b 	bl	8001478 <setTimer0>
		}
		//change state
		if(isBUTTON2Pressed()==1){
 8000e42:	f7ff f995 	bl	8000170 <isBUTTON2Pressed>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d146      	bne.n	8000eda <fsm_for_input_processing+0x172>
			value_time_light++;
 8000e4c:	4b40      	ldr	r3, [pc, #256]	; (8000f50 <fsm_for_input_processing+0x1e8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a3f      	ldr	r2, [pc, #252]	; (8000f50 <fsm_for_input_processing+0x1e8>)
 8000e54:	6013      	str	r3, [r2, #0]
			red_duration = value_time_light+5;//increase time of red light
 8000e56:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <fsm_for_input_processing+0x1e8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3305      	adds	r3, #5
 8000e5c:	4a3d      	ldr	r2, [pc, #244]	; (8000f54 <fsm_for_input_processing+0x1ec>)
 8000e5e:	6013      	str	r3, [r2, #0]
			if(red_duration>99) red_duration=1;
 8000e60:	4b3c      	ldr	r3, [pc, #240]	; (8000f54 <fsm_for_input_processing+0x1ec>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b63      	cmp	r3, #99	; 0x63
 8000e66:	dd02      	ble.n	8000e6e <fsm_for_input_processing+0x106>
 8000e68:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <fsm_for_input_processing+0x1ec>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
			display7SEG_1(red_duration/10);
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <fsm_for_input_processing+0x1ec>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a39      	ldr	r2, [pc, #228]	; (8000f58 <fsm_for_input_processing+0x1f0>)
 8000e74:	fb82 1203 	smull	r1, r2, r2, r3
 8000e78:	1092      	asrs	r2, r2, #2
 8000e7a:	17db      	asrs	r3, r3, #31
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff faba 	bl	80003f8 <display7SEG_1>
			display7SEG_2(red_duration%10);
 8000e84:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <fsm_for_input_processing+0x1ec>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <fsm_for_input_processing+0x1f0>)
 8000e8a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e8e:	1099      	asrs	r1, r3, #2
 8000e90:	17d3      	asrs	r3, r2, #31
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	460b      	mov	r3, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	1ad1      	subs	r1, r2, r3
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	f7ff fbcc 	bl	800063c <display7SEG_2>
			display7SEG_3(red_duration/10);
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <fsm_for_input_processing+0x1ec>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a2b      	ldr	r2, [pc, #172]	; (8000f58 <fsm_for_input_processing+0x1f0>)
 8000eaa:	fb82 1203 	smull	r1, r2, r2, r3
 8000eae:	1092      	asrs	r2, r2, #2
 8000eb0:	17db      	asrs	r3, r3, #31
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fcbb 	bl	8000830 <display7SEG_3>
			display7SEG_4(red_duration%10);
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <fsm_for_input_processing+0x1ec>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <fsm_for_input_processing+0x1f0>)
 8000ec0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ec4:	1099      	asrs	r1, r3, #2
 8000ec6:	17d3      	asrs	r3, r2, #31
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	460b      	mov	r3, r1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	1ad1      	subs	r1, r2, r3
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	f7ff fda5 	bl	8000a24 <display7SEG_4>
		}
		if(isBUTTON3Pressed()){
 8000eda:	f7ff f95b 	bl	8000194 <isBUTTON3Pressed>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00d      	beq.n	8000f00 <fsm_for_input_processing+0x198>
			value_time_light = 0;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <fsm_for_input_processing+0x1e8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
			Time_in_state_1=red_duration;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <fsm_for_input_processing+0x1ec>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <fsm_for_input_processing+0x1f4>)
 8000ef0:	6013      	str	r3, [r2, #0]
			Time_in_state_2=red_duration;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <fsm_for_input_processing+0x1ec>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <fsm_for_input_processing+0x1f8>)
 8000ef8:	6013      	str	r3, [r2, #0]
			status=1;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <fsm_for_input_processing+0x1d8>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]
		}
		if(isBUTTON1Pressed()==1){
 8000f00:	f7ff f924 	bl	800014c <isBUTTON1Pressed>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	f040 817d 	bne.w	8001206 <fsm_for_input_processing+0x49e>
			value_mode++;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000f14:	6013      	str	r3, [r2, #0]
			display7SEG_mode(value_mode);
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fea4 	bl	8000c68 <display7SEG_mode>
			if(value_mode>4) value_mode=1;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	dd02      	ble.n	8000f2e <fsm_for_input_processing+0x1c6>
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
			status=value_mode;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <fsm_for_input_processing+0x1e0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <fsm_for_input_processing+0x1d8>)
 8000f34:	6013      	str	r3, [r2, #0]
			setTimer0(50);
 8000f36:	2032      	movs	r0, #50	; 0x32
 8000f38:	f000 fa9e 	bl	8001478 <setTimer0>
		}
		break;
 8000f3c:	e163      	b.n	8001206 <fsm_for_input_processing+0x49e>
 8000f3e:	bf00      	nop
 8000f40:	20000048 	.word	0x20000048
 8000f44:	20000090 	.word	0x20000090
 8000f48:	20000044 	.word	0x20000044
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	2000008c 	.word	0x2000008c
 8000f54:	20000038 	.word	0x20000038
 8000f58:	66666667 	.word	0x66666667
 8000f5c:	20000050 	.word	0x20000050
 8000f60:	20000054 	.word	0x20000054
	case 3://MODE3 //YELLOW
		//display
				if(timer0_flag == 1){
 8000f64:	4bab      	ldr	r3, [pc, #684]	; (8001214 <fsm_for_input_processing+0x4ac>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d124      	bne.n	8000fb6 <fsm_for_input_processing+0x24e>
					display7SEG_mode(value_mode);
 8000f6c:	4baa      	ldr	r3, [pc, #680]	; (8001218 <fsm_for_input_processing+0x4b0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe79 	bl	8000c68 <display7SEG_mode>
					HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin );
 8000f76:	2120      	movs	r1, #32
 8000f78:	48a8      	ldr	r0, [pc, #672]	; (800121c <fsm_for_input_processing+0x4b4>)
 8000f7a:	f001 f8d6 	bl	800212a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin );
 8000f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f82:	48a6      	ldr	r0, [pc, #664]	; (800121c <fsm_for_input_processing+0x4b4>)
 8000f84:	f001 f8d1 	bl	800212a <HAL_GPIO_TogglePin>
					HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2108      	movs	r1, #8
 8000f8c:	48a3      	ldr	r0, [pc, #652]	; (800121c <fsm_for_input_processing+0x4b4>)
 8000f8e:	f001 f8b4 	bl	80020fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2140      	movs	r1, #64	; 0x40
 8000f96:	48a1      	ldr	r0, [pc, #644]	; (800121c <fsm_for_input_processing+0x4b4>)
 8000f98:	f001 f8af 	bl	80020fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	489e      	ldr	r0, [pc, #632]	; (800121c <fsm_for_input_processing+0x4b4>)
 8000fa2:	f001 f8aa 	bl	80020fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	489c      	ldr	r0, [pc, #624]	; (800121c <fsm_for_input_processing+0x4b4>)
 8000fac:	f001 f8a5 	bl	80020fa <HAL_GPIO_WritePin>
					setTimer0(50);
 8000fb0:	2032      	movs	r0, #50	; 0x32
 8000fb2:	f000 fa61 	bl	8001478 <setTimer0>
				}
				//change state
				if(isBUTTON2Pressed()==1){
 8000fb6:	f7ff f8db 	bl	8000170 <isBUTTON2Pressed>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d146      	bne.n	800104e <fsm_for_input_processing+0x2e6>
					value_time_light++;
 8000fc0:	4b97      	ldr	r3, [pc, #604]	; (8001220 <fsm_for_input_processing+0x4b8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a96      	ldr	r2, [pc, #600]	; (8001220 <fsm_for_input_processing+0x4b8>)
 8000fc8:	6013      	str	r3, [r2, #0]
					yellow_duration = value_time_light+2;
 8000fca:	4b95      	ldr	r3, [pc, #596]	; (8001220 <fsm_for_input_processing+0x4b8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3302      	adds	r3, #2
 8000fd0:	4a94      	ldr	r2, [pc, #592]	; (8001224 <fsm_for_input_processing+0x4bc>)
 8000fd2:	6013      	str	r3, [r2, #0]
					if(yellow_duration>99) yellow_duration=1;
 8000fd4:	4b93      	ldr	r3, [pc, #588]	; (8001224 <fsm_for_input_processing+0x4bc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b63      	cmp	r3, #99	; 0x63
 8000fda:	dd02      	ble.n	8000fe2 <fsm_for_input_processing+0x27a>
 8000fdc:	4b91      	ldr	r3, [pc, #580]	; (8001224 <fsm_for_input_processing+0x4bc>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
					display7SEG_1(yellow_duration/10);
 8000fe2:	4b90      	ldr	r3, [pc, #576]	; (8001224 <fsm_for_input_processing+0x4bc>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a90      	ldr	r2, [pc, #576]	; (8001228 <fsm_for_input_processing+0x4c0>)
 8000fe8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fec:	1092      	asrs	r2, r2, #2
 8000fee:	17db      	asrs	r3, r3, #31
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fa00 	bl	80003f8 <display7SEG_1>
					display7SEG_2(yellow_duration%10);
 8000ff8:	4b8a      	ldr	r3, [pc, #552]	; (8001224 <fsm_for_input_processing+0x4bc>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b8a      	ldr	r3, [pc, #552]	; (8001228 <fsm_for_input_processing+0x4c0>)
 8000ffe:	fb83 1302 	smull	r1, r3, r3, r2
 8001002:	1099      	asrs	r1, r3, #2
 8001004:	17d3      	asrs	r3, r2, #31
 8001006:	1ac9      	subs	r1, r1, r3
 8001008:	460b      	mov	r3, r1
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	1ad1      	subs	r1, r2, r3
 8001012:	4608      	mov	r0, r1
 8001014:	f7ff fb12 	bl	800063c <display7SEG_2>
					display7SEG_3(yellow_duration/10);
 8001018:	4b82      	ldr	r3, [pc, #520]	; (8001224 <fsm_for_input_processing+0x4bc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a82      	ldr	r2, [pc, #520]	; (8001228 <fsm_for_input_processing+0x4c0>)
 800101e:	fb82 1203 	smull	r1, r2, r2, r3
 8001022:	1092      	asrs	r2, r2, #2
 8001024:	17db      	asrs	r3, r3, #31
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fc01 	bl	8000830 <display7SEG_3>
					display7SEG_4(yellow_duration%10);
 800102e:	4b7d      	ldr	r3, [pc, #500]	; (8001224 <fsm_for_input_processing+0x4bc>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b7d      	ldr	r3, [pc, #500]	; (8001228 <fsm_for_input_processing+0x4c0>)
 8001034:	fb83 1302 	smull	r1, r3, r3, r2
 8001038:	1099      	asrs	r1, r3, #2
 800103a:	17d3      	asrs	r3, r2, #31
 800103c:	1ac9      	subs	r1, r1, r3
 800103e:	460b      	mov	r3, r1
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	1ad1      	subs	r1, r2, r3
 8001048:	4608      	mov	r0, r1
 800104a:	f7ff fceb 	bl	8000a24 <display7SEG_4>
				}
				if(isBUTTON3Pressed()){
 800104e:	f7ff f8a1 	bl	8000194 <isBUTTON3Pressed>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00d      	beq.n	8001074 <fsm_for_input_processing+0x30c>
					value_time_light = 0;
 8001058:	4b71      	ldr	r3, [pc, #452]	; (8001220 <fsm_for_input_processing+0x4b8>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
					Time_in_state_1=yellow_duration;
 800105e:	4b71      	ldr	r3, [pc, #452]	; (8001224 <fsm_for_input_processing+0x4bc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a72      	ldr	r2, [pc, #456]	; (800122c <fsm_for_input_processing+0x4c4>)
 8001064:	6013      	str	r3, [r2, #0]
					Time_in_state_2=yellow_duration;
 8001066:	4b6f      	ldr	r3, [pc, #444]	; (8001224 <fsm_for_input_processing+0x4bc>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a71      	ldr	r2, [pc, #452]	; (8001230 <fsm_for_input_processing+0x4c8>)
 800106c:	6013      	str	r3, [r2, #0]
					status=1;
 800106e:	4b71      	ldr	r3, [pc, #452]	; (8001234 <fsm_for_input_processing+0x4cc>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]
				}
				if(isBUTTON1Pressed()==1){
 8001074:	f7ff f86a 	bl	800014c <isBUTTON1Pressed>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	f040 80c5 	bne.w	800120a <fsm_for_input_processing+0x4a2>
					value_mode++;
 8001080:	4b65      	ldr	r3, [pc, #404]	; (8001218 <fsm_for_input_processing+0x4b0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a64      	ldr	r2, [pc, #400]	; (8001218 <fsm_for_input_processing+0x4b0>)
 8001088:	6013      	str	r3, [r2, #0]
					display7SEG_mode(value_mode);
 800108a:	4b63      	ldr	r3, [pc, #396]	; (8001218 <fsm_for_input_processing+0x4b0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fdea 	bl	8000c68 <display7SEG_mode>
					if(value_mode>4) value_mode=1;
 8001094:	4b60      	ldr	r3, [pc, #384]	; (8001218 <fsm_for_input_processing+0x4b0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b04      	cmp	r3, #4
 800109a:	dd02      	ble.n	80010a2 <fsm_for_input_processing+0x33a>
 800109c:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <fsm_for_input_processing+0x4b0>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
					status=value_mode;
 80010a2:	4b5d      	ldr	r3, [pc, #372]	; (8001218 <fsm_for_input_processing+0x4b0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a63      	ldr	r2, [pc, #396]	; (8001234 <fsm_for_input_processing+0x4cc>)
 80010a8:	6013      	str	r3, [r2, #0]
					setTimer0(50);
 80010aa:	2032      	movs	r0, #50	; 0x32
 80010ac:	f000 f9e4 	bl	8001478 <setTimer0>
				}
		break;
 80010b0:	e0ab      	b.n	800120a <fsm_for_input_processing+0x4a2>
	case 4://MODE4
		//display
				if(timer0_flag == 1){
 80010b2:	4b58      	ldr	r3, [pc, #352]	; (8001214 <fsm_for_input_processing+0x4ac>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d124      	bne.n	8001104 <fsm_for_input_processing+0x39c>
					display7SEG_mode(value_mode);
 80010ba:	4b57      	ldr	r3, [pc, #348]	; (8001218 <fsm_for_input_processing+0x4b0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fdd2 	bl	8000c68 <display7SEG_mode>
					HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin );
 80010c4:	2110      	movs	r1, #16
 80010c6:	4855      	ldr	r0, [pc, #340]	; (800121c <fsm_for_input_processing+0x4b4>)
 80010c8:	f001 f82f 	bl	800212a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin );
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	4853      	ldr	r0, [pc, #332]	; (800121c <fsm_for_input_processing+0x4b4>)
 80010d0:	f001 f82b 	bl	800212a <HAL_GPIO_TogglePin>
					HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2108      	movs	r1, #8
 80010d8:	4850      	ldr	r0, [pc, #320]	; (800121c <fsm_for_input_processing+0x4b4>)
 80010da:	f001 f80e 	bl	80020fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	2140      	movs	r1, #64	; 0x40
 80010e2:	484e      	ldr	r0, [pc, #312]	; (800121c <fsm_for_input_processing+0x4b4>)
 80010e4:	f001 f809 	bl	80020fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2120      	movs	r1, #32
 80010ec:	484b      	ldr	r0, [pc, #300]	; (800121c <fsm_for_input_processing+0x4b4>)
 80010ee:	f001 f804 	bl	80020fa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f8:	4848      	ldr	r0, [pc, #288]	; (800121c <fsm_for_input_processing+0x4b4>)
 80010fa:	f000 fffe 	bl	80020fa <HAL_GPIO_WritePin>
					setTimer0(50);
 80010fe:	2032      	movs	r0, #50	; 0x32
 8001100:	f000 f9ba 	bl	8001478 <setTimer0>
				}
				//change state
				if(isBUTTON2Pressed()==1){
 8001104:	f7ff f834 	bl	8000170 <isBUTTON2Pressed>
 8001108:	4603      	mov	r3, r0
 800110a:	2b01      	cmp	r3, #1
 800110c:	d146      	bne.n	800119c <fsm_for_input_processing+0x434>
					value_time_light++;
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <fsm_for_input_processing+0x4b8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	4a42      	ldr	r2, [pc, #264]	; (8001220 <fsm_for_input_processing+0x4b8>)
 8001116:	6013      	str	r3, [r2, #0]
					green_duration = value_time_light+3;
 8001118:	4b41      	ldr	r3, [pc, #260]	; (8001220 <fsm_for_input_processing+0x4b8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3303      	adds	r3, #3
 800111e:	4a46      	ldr	r2, [pc, #280]	; (8001238 <fsm_for_input_processing+0x4d0>)
 8001120:	6013      	str	r3, [r2, #0]
					if(green_duration>99) green_duration=1;
 8001122:	4b45      	ldr	r3, [pc, #276]	; (8001238 <fsm_for_input_processing+0x4d0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b63      	cmp	r3, #99	; 0x63
 8001128:	dd02      	ble.n	8001130 <fsm_for_input_processing+0x3c8>
 800112a:	4b43      	ldr	r3, [pc, #268]	; (8001238 <fsm_for_input_processing+0x4d0>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]
					display7SEG_1(green_duration/10);
 8001130:	4b41      	ldr	r3, [pc, #260]	; (8001238 <fsm_for_input_processing+0x4d0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a3c      	ldr	r2, [pc, #240]	; (8001228 <fsm_for_input_processing+0x4c0>)
 8001136:	fb82 1203 	smull	r1, r2, r2, r3
 800113a:	1092      	asrs	r2, r2, #2
 800113c:	17db      	asrs	r3, r3, #31
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f959 	bl	80003f8 <display7SEG_1>
					display7SEG_2(green_duration%10);
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <fsm_for_input_processing+0x4d0>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <fsm_for_input_processing+0x4c0>)
 800114c:	fb83 1302 	smull	r1, r3, r3, r2
 8001150:	1099      	asrs	r1, r3, #2
 8001152:	17d3      	asrs	r3, r2, #31
 8001154:	1ac9      	subs	r1, r1, r3
 8001156:	460b      	mov	r3, r1
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	1ad1      	subs	r1, r2, r3
 8001160:	4608      	mov	r0, r1
 8001162:	f7ff fa6b 	bl	800063c <display7SEG_2>
					display7SEG_3(green_duration/10);
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <fsm_for_input_processing+0x4d0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a2f      	ldr	r2, [pc, #188]	; (8001228 <fsm_for_input_processing+0x4c0>)
 800116c:	fb82 1203 	smull	r1, r2, r2, r3
 8001170:	1092      	asrs	r2, r2, #2
 8001172:	17db      	asrs	r3, r3, #31
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fb5a 	bl	8000830 <display7SEG_3>
					display7SEG_4(green_duration%10);
 800117c:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <fsm_for_input_processing+0x4d0>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <fsm_for_input_processing+0x4c0>)
 8001182:	fb83 1302 	smull	r1, r3, r3, r2
 8001186:	1099      	asrs	r1, r3, #2
 8001188:	17d3      	asrs	r3, r2, #31
 800118a:	1ac9      	subs	r1, r1, r3
 800118c:	460b      	mov	r3, r1
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	1ad1      	subs	r1, r2, r3
 8001196:	4608      	mov	r0, r1
 8001198:	f7ff fc44 	bl	8000a24 <display7SEG_4>
				}
				if(isBUTTON3Pressed()){
 800119c:	f7fe fffa 	bl	8000194 <isBUTTON3Pressed>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00d      	beq.n	80011c2 <fsm_for_input_processing+0x45a>
					value_time_light = 0;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <fsm_for_input_processing+0x4b8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
					Time_in_state_1=green_duration;
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <fsm_for_input_processing+0x4d0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1e      	ldr	r2, [pc, #120]	; (800122c <fsm_for_input_processing+0x4c4>)
 80011b2:	6013      	str	r3, [r2, #0]
					Time_in_state_2=green_duration;
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <fsm_for_input_processing+0x4d0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <fsm_for_input_processing+0x4c8>)
 80011ba:	6013      	str	r3, [r2, #0]
					status=1;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <fsm_for_input_processing+0x4cc>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
				}
				if(isBUTTON1Pressed()==1){
 80011c2:	f7fe ffc3 	bl	800014c <isBUTTON1Pressed>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d120      	bne.n	800120e <fsm_for_input_processing+0x4a6>
					value_mode++;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <fsm_for_input_processing+0x4b0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <fsm_for_input_processing+0x4b0>)
 80011d4:	6013      	str	r3, [r2, #0]
					display7SEG_mode(value_mode);
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <fsm_for_input_processing+0x4b0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd44 	bl	8000c68 <display7SEG_mode>
					if(value_mode>4) value_mode=1;
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <fsm_for_input_processing+0x4b0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	dd02      	ble.n	80011ee <fsm_for_input_processing+0x486>
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <fsm_for_input_processing+0x4b0>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
					status=value_mode;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <fsm_for_input_processing+0x4b0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <fsm_for_input_processing+0x4cc>)
 80011f4:	6013      	str	r3, [r2, #0]
					setTimer0(50);
 80011f6:	2032      	movs	r0, #50	; 0x32
 80011f8:	f000 f93e 	bl	8001478 <setTimer0>
				}
		break;
 80011fc:	e007      	b.n	800120e <fsm_for_input_processing+0x4a6>
	default:
		break;
 80011fe:	bf00      	nop
 8001200:	e006      	b.n	8001210 <fsm_for_input_processing+0x4a8>
		break;
 8001202:	bf00      	nop
 8001204:	e004      	b.n	8001210 <fsm_for_input_processing+0x4a8>
		break;
 8001206:	bf00      	nop
 8001208:	e002      	b.n	8001210 <fsm_for_input_processing+0x4a8>
		break;
 800120a:	bf00      	nop
 800120c:	e000      	b.n	8001210 <fsm_for_input_processing+0x4a8>
		break;
 800120e:	bf00      	nop
	}
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000090 	.word	0x20000090
 8001218:	20000044 	.word	0x20000044
 800121c:	40010800 	.word	0x40010800
 8001220:	2000008c 	.word	0x2000008c
 8001224:	20000040 	.word	0x20000040
 8001228:	66666667 	.word	0x66666667
 800122c:	20000050 	.word	0x20000050
 8001230:	20000054 	.word	0x20000054
 8001234:	20000048 	.word	0x20000048
 8001238:	2000003c 	.word	0x2000003c

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001240:	f000 fc5a 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001244:	f000 f812 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001248:	f000 f84c 	bl	80012e4 <MX_TIM2_Init>
  MX_GPIO_Init();
 800124c:	f000 f896 	bl	800137c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <main+0x2c>)
 8001252:	f001 fbbb 	bl	80029cc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  Traffic_Light_Init();
 8001256:	f000 fa6b 	bl	8001730 <Traffic_Light_Init>
  setTimer0(10);
 800125a:	200a      	movs	r0, #10
 800125c:	f000 f90c 	bl	8001478 <setTimer0>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_for_input_processing();
 8001260:	f7ff fd82 	bl	8000d68 <fsm_for_input_processing>
 8001264:	e7fc      	b.n	8001260 <main+0x24>
 8001266:	bf00      	nop
 8001268:	200000e0 	.word	0x200000e0

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b090      	sub	sp, #64	; 0x40
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	2228      	movs	r2, #40	; 0x28
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f001 ff5e 	bl	800313c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001292:	2301      	movs	r3, #1
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001296:	2310      	movs	r3, #16
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800129a:	2300      	movs	r3, #0
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 ff5a 	bl	800215c <HAL_RCC_OscConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012ae:	f000 f8de 	bl	800146e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b2:	230f      	movs	r3, #15
 80012b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 f9c6 	bl	800265c <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012d6:	f000 f8ca 	bl	800146e <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3740      	adds	r7, #64	; 0x40
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <MX_TIM2_Init+0x94>)
 8001302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_TIM2_Init+0x94>)
 800130a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800130e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_TIM2_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_TIM2_Init+0x94>)
 8001318:	2209      	movs	r2, #9
 800131a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_TIM2_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_TIM2_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_TIM2_Init+0x94>)
 800132a:	f001 faff 	bl	800292c <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001334:	f000 f89b 	bl	800146e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <MX_TIM2_Init+0x94>)
 8001346:	f001 fc95 	bl	8002c74 <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001350:	f000 f88d 	bl	800146e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_TIM2_Init+0x94>)
 8001362:	f001 fe5d 	bl	8003020 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800136c:	f000 f87f 	bl	800146e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200000e0 	.word	0x200000e0

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <MX_GPIO_Init+0xbc>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a28      	ldr	r2, [pc, #160]	; (8001438 <MX_GPIO_Init+0xbc>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_GPIO_Init+0xbc>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <MX_GPIO_Init+0xbc>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a22      	ldr	r2, [pc, #136]	; (8001438 <MX_GPIO_Init+0xbc>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_GPIO_Init+0xbc>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_GREEN_1_Pin|LED_YELLOW_1_Pin|LED_RED_2_Pin
 80013c0:	2200      	movs	r2, #0
 80013c2:	f24f 11f8 	movw	r1, #61944	; 0xf1f8
 80013c6:	481d      	ldr	r0, [pc, #116]	; (800143c <MX_GPIO_Init+0xc0>)
 80013c8:	f000 fe97 	bl	80020fa <HAL_GPIO_WritePin>
                          |LED_GREEN_2_Pin|LED_YELLOW_2_Pin|INPUTSEG0_1_Pin|INPUTSEG0_2_Pin
                          |INPUTSEG0_3_Pin|INPUTSEG0_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUTSEG1_1_Pin|INPUTSEG1_2_Pin|INPUTSEG1_3_Pin|INPUTSEG3_3_Pin
 80013cc:	2200      	movs	r2, #0
 80013ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013d2:	481b      	ldr	r0, [pc, #108]	; (8001440 <MX_GPIO_Init+0xc4>)
 80013d4:	f000 fe91 	bl	80020fa <HAL_GPIO_WritePin>
                          |INPUTSEG2_3_Pin|INPUTSEG2_4_Pin|INPUTSEG3_1_Pin|INPUTSEG3_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_GREEN_1_Pin LED_YELLOW_1_Pin LED_RED_2_Pin
                           LED_GREEN_2_Pin LED_YELLOW_2_Pin INPUTSEG0_1_Pin INPUTSEG0_2_Pin
                           INPUTSEG0_3_Pin INPUTSEG0_4_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_GREEN_1_Pin|LED_YELLOW_1_Pin|LED_RED_2_Pin
 80013d8:	f24f 13f8 	movw	r3, #61944	; 0xf1f8
 80013dc:	60bb      	str	r3, [r7, #8]
                          |LED_GREEN_2_Pin|LED_YELLOW_2_Pin|INPUTSEG0_1_Pin|INPUTSEG0_2_Pin
                          |INPUTSEG0_3_Pin|INPUTSEG0_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2302      	movs	r3, #2
 80013e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	4812      	ldr	r0, [pc, #72]	; (800143c <MX_GPIO_Init+0xc0>)
 80013f2:	f000 fcf1 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUTSEG1_1_Pin INPUTSEG1_2_Pin INPUTSEG1_3_Pin INPUTSEG3_3_Pin
                           INPUTSEG3_4_Pin MODE_1_Pin MODE_2_Pin MODE_3_Pin
                           MODE_4_Pin INPUTSEG1_4_Pin INPUTSEG2_1_Pin INPUTSEG2_2_Pin
                           INPUTSEG2_3_Pin INPUTSEG2_4_Pin INPUTSEG3_1_Pin INPUTSEG3_2_Pin */
  GPIO_InitStruct.Pin = INPUTSEG1_1_Pin|INPUTSEG1_2_Pin|INPUTSEG1_3_Pin|INPUTSEG3_3_Pin
 80013f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fa:	60bb      	str	r3, [r7, #8]
                          |INPUTSEG3_4_Pin|MODE_1_Pin|MODE_2_Pin|MODE_3_Pin
                          |MODE_4_Pin|INPUTSEG1_4_Pin|INPUTSEG2_1_Pin|INPUTSEG2_2_Pin
                          |INPUTSEG2_3_Pin|INPUTSEG2_4_Pin|INPUTSEG3_1_Pin|INPUTSEG3_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2302      	movs	r3, #2
 8001406:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	480c      	ldr	r0, [pc, #48]	; (8001440 <MX_GPIO_Init+0xc4>)
 8001410:	f000 fce2 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001414:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001418:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141e:	2301      	movs	r3, #1
 8001420:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	4619      	mov	r1, r3
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_GPIO_Init+0xc0>)
 800142a:	f000 fcd5 	bl	8001dd8 <HAL_GPIO_Init>

}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	40010800 	.word	0x40010800
 8001440:	40010c00 	.word	0x40010c00

08001444 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	if( htim -> Instance == TIM2 ) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001454:	d107      	bne.n	8001466 <HAL_TIM_PeriodElapsedCallback+0x22>
		getBUTTON1Input();
 8001456:	f7fe fed3 	bl	8000200 <getBUTTON1Input>
		getBUTTON2Input();
 800145a:	f7fe ff25 	bl	80002a8 <getBUTTON2Input>
		getBUTTON3Input();
 800145e:	f7fe ff77 	bl	8000350 <getBUTTON3Input>
		timer_run();
 8001462:	f000 f81d 	bl	80014a0 <timer_run>
	}
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001472:	b672      	cpsid	i
}
 8001474:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001476:	e7fe      	b.n	8001476 <Error_Handler+0x8>

08001478 <setTimer0>:

//timer 0
int timer0_counter = 0;
int timer0_flag = 0;

void setTimer0(int duration){
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <setTimer0+0x20>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <setTimer0+0x24>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200000b4 	.word	0x200000b4
 800149c:	20000090 	.word	0x20000090

080014a0 <timer_run>:
	timer8_flag = 0;
}



void timer_run(){
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 80014a4:	4b49      	ldr	r3, [pc, #292]	; (80015cc <timer_run+0x12c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	dd0b      	ble.n	80014c4 <timer_run+0x24>
		timer0_counter--;
 80014ac:	4b47      	ldr	r3, [pc, #284]	; (80015cc <timer_run+0x12c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	4a46      	ldr	r2, [pc, #280]	; (80015cc <timer_run+0x12c>)
 80014b4:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0){
 80014b6:	4b45      	ldr	r3, [pc, #276]	; (80015cc <timer_run+0x12c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <timer_run+0x24>
			timer0_flag = 1;
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <timer_run+0x130>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer1_counter > 0){
 80014c4:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <timer_run+0x134>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	dd0b      	ble.n	80014e4 <timer_run+0x44>
		timer1_counter--;
 80014cc:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <timer_run+0x134>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	4a40      	ldr	r2, [pc, #256]	; (80015d4 <timer_run+0x134>)
 80014d4:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 80014d6:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <timer_run+0x134>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <timer_run+0x44>
			timer1_flag = 1;
 80014de:	4b3e      	ldr	r3, [pc, #248]	; (80015d8 <timer_run+0x138>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 80014e4:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <timer_run+0x13c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	dd0b      	ble.n	8001504 <timer_run+0x64>
		timer2_counter--;
 80014ec:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <timer_run+0x13c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4a3a      	ldr	r2, [pc, #232]	; (80015dc <timer_run+0x13c>)
 80014f4:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <timer_run+0x13c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <timer_run+0x64>
			timer2_flag = 1;
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <timer_run+0x140>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8001504:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <timer_run+0x144>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	dd0b      	ble.n	8001524 <timer_run+0x84>
		timer3_counter--;
 800150c:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <timer_run+0x144>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	4a34      	ldr	r2, [pc, #208]	; (80015e4 <timer_run+0x144>)
 8001514:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8001516:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <timer_run+0x144>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <timer_run+0x84>
			timer3_flag = 1;
 800151e:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <timer_run+0x148>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <timer_run+0x14c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	dd0b      	ble.n	8001544 <timer_run+0xa4>
			timer4_counter--;
 800152c:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <timer_run+0x14c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3b01      	subs	r3, #1
 8001532:	4a2e      	ldr	r2, [pc, #184]	; (80015ec <timer_run+0x14c>)
 8001534:	6013      	str	r3, [r2, #0]
			if(timer4_counter == 0){
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <timer_run+0x14c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <timer_run+0xa4>
				timer4_flag = 1;
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <timer_run+0x150>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer5_counter > 0){
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <timer_run+0x154>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	dd0b      	ble.n	8001564 <timer_run+0xc4>
		timer5_counter--;
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <timer_run+0x154>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <timer_run+0x154>)
 8001554:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 8001556:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <timer_run+0x154>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <timer_run+0xc4>
			timer5_flag = 1;
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <timer_run+0x158>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <timer_run+0x15c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	dd0b      	ble.n	8001584 <timer_run+0xe4>
			timer6_counter--;
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <timer_run+0x15c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3b01      	subs	r3, #1
 8001572:	4a22      	ldr	r2, [pc, #136]	; (80015fc <timer_run+0x15c>)
 8001574:	6013      	str	r3, [r2, #0]
			if(timer6_counter == 0){
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <timer_run+0x15c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <timer_run+0xe4>
				timer6_flag = 1;
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <timer_run+0x160>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer7_counter > 0){
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <timer_run+0x164>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	dd0b      	ble.n	80015a4 <timer_run+0x104>
			timer7_counter--;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <timer_run+0x164>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <timer_run+0x164>)
 8001594:	6013      	str	r3, [r2, #0]
			if(timer7_counter == 0){
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <timer_run+0x164>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <timer_run+0x104>
				timer7_flag = 1;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <timer_run+0x168>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer8_counter > 0){
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <timer_run+0x16c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	dd0b      	ble.n	80015c4 <timer_run+0x124>
			timer8_counter--;
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <timer_run+0x16c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	4a16      	ldr	r2, [pc, #88]	; (800160c <timer_run+0x16c>)
 80015b4:	6013      	str	r3, [r2, #0]
			if(timer8_counter == 0){
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <timer_run+0x16c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <timer_run+0x124>
				timer8_flag = 1;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <timer_run+0x170>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
			}
		}
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	200000b4 	.word	0x200000b4
 80015d0:	20000090 	.word	0x20000090
 80015d4:	200000b8 	.word	0x200000b8
 80015d8:	20000094 	.word	0x20000094
 80015dc:	200000bc 	.word	0x200000bc
 80015e0:	20000098 	.word	0x20000098
 80015e4:	200000c0 	.word	0x200000c0
 80015e8:	2000009c 	.word	0x2000009c
 80015ec:	200000c4 	.word	0x200000c4
 80015f0:	200000a0 	.word	0x200000a0
 80015f4:	200000c8 	.word	0x200000c8
 80015f8:	200000a4 	.word	0x200000a4
 80015fc:	200000cc 	.word	0x200000cc
 8001600:	200000a8 	.word	0x200000a8
 8001604:	200000d0 	.word	0x200000d0
 8001608:	200000ac 	.word	0x200000ac
 800160c:	200000d4 	.word	0x200000d4
 8001610:	200000b0 	.word	0x200000b0

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a14      	ldr	r2, [pc, #80]	; (8001670 <HAL_MspInit+0x5c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_MspInit+0x5c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_MspInit+0x5c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x5c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_MspInit+0x60>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_MspInit+0x60>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40021000 	.word	0x40021000
 8001674:	40010000 	.word	0x40010000

08001678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001688:	d113      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_TIM_Base_MspInit+0x44>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_TIM_Base_MspInit+0x44>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_TIM_Base_MspInit+0x44>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	201c      	movs	r0, #28
 80016a8:	f000 fb5f 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ac:	201c      	movs	r0, #28
 80016ae:	f000 fb78 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <NMI_Handler+0x4>

080016c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <MemManage_Handler+0x4>

080016d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <UsageFault_Handler+0x4>

080016de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001706:	f000 fa3d 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM2_IRQHandler+0x10>)
 8001716:	f001 f9a5 	bl	8002a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000e0 	.word	0x200000e0

08001724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <Traffic_Light_Init>:

typedef enum {RED, GREEN, YELLOW } eLightState;
int Time_in_state_1 = 5;//red_duration
int Time_in_state_2 = 3;// green_duration
void Traffic_Light_Init(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	Light_state_LR = RED;  //RIGHT is red
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <Traffic_Light_Init+0x18>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
	Light_state_BT = GREEN; // TOP is green
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <Traffic_Light_Init+0x1c>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	200000d8 	.word	0x200000d8
 800174c:	200000dc 	.word	0x200000dc

08001750 <Traffic_Light_Update_12>:

void Traffic_Light_Update_12(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	switch(Light_state_LR) //led red is first
 8001754:	4b62      	ldr	r3, [pc, #392]	; (80018e0 <Traffic_Light_Update_12+0x190>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d042      	beq.n	80017e2 <Traffic_Light_Update_12+0x92>
 800175c:	2b02      	cmp	r3, #2
 800175e:	f300 80b6 	bgt.w	80018ce <Traffic_Light_Update_12+0x17e>
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <Traffic_Light_Update_12+0x1c>
 8001766:	2b01      	cmp	r3, #1
 8001768:	d076      	beq.n	8001858 <Traffic_Light_Update_12+0x108>
			Light_state_LR = YELLOW;
			Time_in_state_1 = yellow_duration;
		}
		break;
	default:
		break;
 800176a:	e0b0      	b.n	80018ce <Traffic_Light_Update_12+0x17e>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2108      	movs	r1, #8
 8001770:	485c      	ldr	r0, [pc, #368]	; (80018e4 <Traffic_Light_Update_12+0x194>)
 8001772:	f000 fcc2 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8001776:	2201      	movs	r2, #1
 8001778:	2120      	movs	r1, #32
 800177a:	485a      	ldr	r0, [pc, #360]	; (80018e4 <Traffic_Light_Update_12+0x194>)
 800177c:	f000 fcbd 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	2110      	movs	r1, #16
 8001784:	4857      	ldr	r0, [pc, #348]	; (80018e4 <Traffic_Light_Update_12+0x194>)
 8001786:	f000 fcb8 	bl	80020fa <HAL_GPIO_WritePin>
		Time_in_state_1--; // led red increase every sec
 800178a:	4b57      	ldr	r3, [pc, #348]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3b01      	subs	r3, #1
 8001790:	4a55      	ldr	r2, [pc, #340]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 8001792:	6013      	str	r3, [r2, #0]
		display7SEG_1(Time_in_state_1/10);
 8001794:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a54      	ldr	r2, [pc, #336]	; (80018ec <Traffic_Light_Update_12+0x19c>)
 800179a:	fb82 1203 	smull	r1, r2, r2, r3
 800179e:	1092      	asrs	r2, r2, #2
 80017a0:	17db      	asrs	r3, r3, #31
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe27 	bl	80003f8 <display7SEG_1>
		display7SEG_2(Time_in_state_1%10);
 80017aa:	4b4f      	ldr	r3, [pc, #316]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <Traffic_Light_Update_12+0x19c>)
 80017b0:	fb83 1302 	smull	r1, r3, r3, r2
 80017b4:	1099      	asrs	r1, r3, #2
 80017b6:	17d3      	asrs	r3, r2, #31
 80017b8:	1ac9      	subs	r1, r1, r3
 80017ba:	460b      	mov	r3, r1
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	1ad1      	subs	r1, r2, r3
 80017c4:	4608      	mov	r0, r1
 80017c6:	f7fe ff39 	bl	800063c <display7SEG_2>
		if(Time_in_state_1 == 0)
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d17f      	bne.n	80018d2 <Traffic_Light_Update_12+0x182>
			Light_state_LR = GREEN;
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <Traffic_Light_Update_12+0x190>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
			Time_in_state_1 = green_duration;
 80017d8:	4b45      	ldr	r3, [pc, #276]	; (80018f0 <Traffic_Light_Update_12+0x1a0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a42      	ldr	r2, [pc, #264]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 80017de:	6013      	str	r3, [r2, #0]
		break;
 80017e0:	e077      	b.n	80018d2 <Traffic_Light_Update_12+0x182>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	2108      	movs	r1, #8
 80017e6:	483f      	ldr	r0, [pc, #252]	; (80018e4 <Traffic_Light_Update_12+0x194>)
 80017e8:	f000 fc87 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2120      	movs	r1, #32
 80017f0:	483c      	ldr	r0, [pc, #240]	; (80018e4 <Traffic_Light_Update_12+0x194>)
 80017f2:	f000 fc82 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2110      	movs	r1, #16
 80017fa:	483a      	ldr	r0, [pc, #232]	; (80018e4 <Traffic_Light_Update_12+0x194>)
 80017fc:	f000 fc7d 	bl	80020fa <HAL_GPIO_WritePin>
		Time_in_state_1--;
 8001800:	4b39      	ldr	r3, [pc, #228]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3b01      	subs	r3, #1
 8001806:	4a38      	ldr	r2, [pc, #224]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 8001808:	6013      	str	r3, [r2, #0]
		display7SEG_1(Time_in_state_1/10);
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a37      	ldr	r2, [pc, #220]	; (80018ec <Traffic_Light_Update_12+0x19c>)
 8001810:	fb82 1203 	smull	r1, r2, r2, r3
 8001814:	1092      	asrs	r2, r2, #2
 8001816:	17db      	asrs	r3, r3, #31
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fdec 	bl	80003f8 <display7SEG_1>
		display7SEG_2(Time_in_state_1%10);
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b31      	ldr	r3, [pc, #196]	; (80018ec <Traffic_Light_Update_12+0x19c>)
 8001826:	fb83 1302 	smull	r1, r3, r3, r2
 800182a:	1099      	asrs	r1, r3, #2
 800182c:	17d3      	asrs	r3, r2, #31
 800182e:	1ac9      	subs	r1, r1, r3
 8001830:	460b      	mov	r3, r1
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	1ad1      	subs	r1, r2, r3
 800183a:	4608      	mov	r0, r1
 800183c:	f7fe fefe 	bl	800063c <display7SEG_2>
		if(Time_in_state_1 == 0)
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d146      	bne.n	80018d6 <Traffic_Light_Update_12+0x186>
			Light_state_LR = RED;
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <Traffic_Light_Update_12+0x190>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
			Time_in_state_1 = red_duration;
 800184e:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <Traffic_Light_Update_12+0x1a4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a25      	ldr	r2, [pc, #148]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 8001854:	6013      	str	r3, [r2, #0]
		break;
 8001856:	e03e      	b.n	80018d6 <Traffic_Light_Update_12+0x186>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2108      	movs	r1, #8
 800185c:	4821      	ldr	r0, [pc, #132]	; (80018e4 <Traffic_Light_Update_12+0x194>)
 800185e:	f000 fc4c 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8001862:	2201      	movs	r2, #1
 8001864:	2120      	movs	r1, #32
 8001866:	481f      	ldr	r0, [pc, #124]	; (80018e4 <Traffic_Light_Update_12+0x194>)
 8001868:	f000 fc47 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2110      	movs	r1, #16
 8001870:	481c      	ldr	r0, [pc, #112]	; (80018e4 <Traffic_Light_Update_12+0x194>)
 8001872:	f000 fc42 	bl	80020fa <HAL_GPIO_WritePin>
		Time_in_state_1--;
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3b01      	subs	r3, #1
 800187c:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 800187e:	6013      	str	r3, [r2, #0]
		display7SEG_1(Time_in_state_1/10);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <Traffic_Light_Update_12+0x19c>)
 8001886:	fb82 1203 	smull	r1, r2, r2, r3
 800188a:	1092      	asrs	r2, r2, #2
 800188c:	17db      	asrs	r3, r3, #31
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fdb1 	bl	80003f8 <display7SEG_1>
		display7SEG_2(Time_in_state_1%10);
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <Traffic_Light_Update_12+0x19c>)
 800189c:	fb83 1302 	smull	r1, r3, r3, r2
 80018a0:	1099      	asrs	r1, r3, #2
 80018a2:	17d3      	asrs	r3, r2, #31
 80018a4:	1ac9      	subs	r1, r1, r3
 80018a6:	460b      	mov	r3, r1
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	1ad1      	subs	r1, r2, r3
 80018b0:	4608      	mov	r0, r1
 80018b2:	f7fe fec3 	bl	800063c <display7SEG_2>
		if(Time_in_state_1 == 0)
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10d      	bne.n	80018da <Traffic_Light_Update_12+0x18a>
			Light_state_LR = YELLOW;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <Traffic_Light_Update_12+0x190>)
 80018c0:	2202      	movs	r2, #2
 80018c2:	601a      	str	r2, [r3, #0]
			Time_in_state_1 = yellow_duration;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <Traffic_Light_Update_12+0x1a8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <Traffic_Light_Update_12+0x198>)
 80018ca:	6013      	str	r3, [r2, #0]
		break;
 80018cc:	e005      	b.n	80018da <Traffic_Light_Update_12+0x18a>
		break;
 80018ce:	bf00      	nop
 80018d0:	e004      	b.n	80018dc <Traffic_Light_Update_12+0x18c>
		break;
 80018d2:	bf00      	nop
 80018d4:	e002      	b.n	80018dc <Traffic_Light_Update_12+0x18c>
		break;
 80018d6:	bf00      	nop
 80018d8:	e000      	b.n	80018dc <Traffic_Light_Update_12+0x18c>
		break;
 80018da:	bf00      	nop
	}
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200000d8 	.word	0x200000d8
 80018e4:	40010800 	.word	0x40010800
 80018e8:	20000050 	.word	0x20000050
 80018ec:	66666667 	.word	0x66666667
 80018f0:	2000003c 	.word	0x2000003c
 80018f4:	20000038 	.word	0x20000038
 80018f8:	20000040 	.word	0x20000040

080018fc <Traffic_Light_Update_34>:
void Traffic_Light_Update_34(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	switch(Light_state_BT)
 8001900:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <Traffic_Light_Update_34+0x194>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d043      	beq.n	8001990 <Traffic_Light_Update_34+0x94>
 8001908:	2b02      	cmp	r3, #2
 800190a:	f300 80be 	bgt.w	8001a8a <Traffic_Light_Update_34+0x18e>
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <Traffic_Light_Update_34+0x1c>
 8001912:	2b01      	cmp	r3, #1
 8001914:	d078      	beq.n	8001a08 <Traffic_Light_Update_34+0x10c>
			Light_state_BT = YELLOW;
			Time_in_state_2 = yellow_duration;
		}
		break;
	}
}
 8001916:	e0b8      	b.n	8001a8a <Traffic_Light_Update_34+0x18e>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	2140      	movs	r1, #64	; 0x40
 800191c:	485d      	ldr	r0, [pc, #372]	; (8001a94 <Traffic_Light_Update_34+0x198>)
 800191e:	f000 fbec 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8001922:	2201      	movs	r2, #1
 8001924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001928:	485a      	ldr	r0, [pc, #360]	; (8001a94 <Traffic_Light_Update_34+0x198>)
 800192a:	f000 fbe6 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	4858      	ldr	r0, [pc, #352]	; (8001a94 <Traffic_Light_Update_34+0x198>)
 8001934:	f000 fbe1 	bl	80020fa <HAL_GPIO_WritePin>
		Time_in_state_2--;
 8001938:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3b01      	subs	r3, #1
 800193e:	4a56      	ldr	r2, [pc, #344]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 8001940:	6013      	str	r3, [r2, #0]
		display7SEG_3(Time_in_state_2/10);
 8001942:	4b55      	ldr	r3, [pc, #340]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a55      	ldr	r2, [pc, #340]	; (8001a9c <Traffic_Light_Update_34+0x1a0>)
 8001948:	fb82 1203 	smull	r1, r2, r2, r3
 800194c:	1092      	asrs	r2, r2, #2
 800194e:	17db      	asrs	r3, r3, #31
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe ff6c 	bl	8000830 <display7SEG_3>
		display7SEG_4(Time_in_state_2%10);
 8001958:	4b4f      	ldr	r3, [pc, #316]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b4f      	ldr	r3, [pc, #316]	; (8001a9c <Traffic_Light_Update_34+0x1a0>)
 800195e:	fb83 1302 	smull	r1, r3, r3, r2
 8001962:	1099      	asrs	r1, r3, #2
 8001964:	17d3      	asrs	r3, r2, #31
 8001966:	1ac9      	subs	r1, r1, r3
 8001968:	460b      	mov	r3, r1
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	1ad1      	subs	r1, r2, r3
 8001972:	4608      	mov	r0, r1
 8001974:	f7ff f856 	bl	8000a24 <display7SEG_4>
		if(Time_in_state_2 == 0)
 8001978:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d17f      	bne.n	8001a80 <Traffic_Light_Update_34+0x184>
			Light_state_BT = GREEN;
 8001980:	4b43      	ldr	r3, [pc, #268]	; (8001a90 <Traffic_Light_Update_34+0x194>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]
			Time_in_state_2 = green_duration;
 8001986:	4b46      	ldr	r3, [pc, #280]	; (8001aa0 <Traffic_Light_Update_34+0x1a4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a43      	ldr	r2, [pc, #268]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 800198c:	6013      	str	r3, [r2, #0]
		break;
 800198e:	e077      	b.n	8001a80 <Traffic_Light_Update_34+0x184>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8001990:	2201      	movs	r2, #1
 8001992:	2140      	movs	r1, #64	; 0x40
 8001994:	483f      	ldr	r0, [pc, #252]	; (8001a94 <Traffic_Light_Update_34+0x198>)
 8001996:	f000 fbb0 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a0:	483c      	ldr	r0, [pc, #240]	; (8001a94 <Traffic_Light_Update_34+0x198>)
 80019a2:	f000 fbaa 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2180      	movs	r1, #128	; 0x80
 80019aa:	483a      	ldr	r0, [pc, #232]	; (8001a94 <Traffic_Light_Update_34+0x198>)
 80019ac:	f000 fba5 	bl	80020fa <HAL_GPIO_WritePin>
		Time_in_state_2--;
 80019b0:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	4a38      	ldr	r2, [pc, #224]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 80019b8:	6013      	str	r3, [r2, #0]
		display7SEG_3(Time_in_state_2/10);
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a37      	ldr	r2, [pc, #220]	; (8001a9c <Traffic_Light_Update_34+0x1a0>)
 80019c0:	fb82 1203 	smull	r1, r2, r2, r3
 80019c4:	1092      	asrs	r2, r2, #2
 80019c6:	17db      	asrs	r3, r3, #31
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe ff30 	bl	8000830 <display7SEG_3>
		display7SEG_4(Time_in_state_2%10);
 80019d0:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <Traffic_Light_Update_34+0x1a0>)
 80019d6:	fb83 1302 	smull	r1, r3, r3, r2
 80019da:	1099      	asrs	r1, r3, #2
 80019dc:	17d3      	asrs	r3, r2, #31
 80019de:	1ac9      	subs	r1, r1, r3
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	1ad1      	subs	r1, r2, r3
 80019ea:	4608      	mov	r0, r1
 80019ec:	f7ff f81a 	bl	8000a24 <display7SEG_4>
		if(Time_in_state_2 == 0)
 80019f0:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d145      	bne.n	8001a84 <Traffic_Light_Update_34+0x188>
			Light_state_BT = RED;
 80019f8:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <Traffic_Light_Update_34+0x194>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
			Time_in_state_2 = red_duration;
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <Traffic_Light_Update_34+0x1a8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a25      	ldr	r2, [pc, #148]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 8001a04:	6013      	str	r3, [r2, #0]
		break;
 8001a06:	e03d      	b.n	8001a84 <Traffic_Light_Update_34+0x188>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2140      	movs	r1, #64	; 0x40
 8001a0c:	4821      	ldr	r0, [pc, #132]	; (8001a94 <Traffic_Light_Update_34+0x198>)
 8001a0e:	f000 fb74 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a18:	481e      	ldr	r0, [pc, #120]	; (8001a94 <Traffic_Light_Update_34+0x198>)
 8001a1a:	f000 fb6e 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	481c      	ldr	r0, [pc, #112]	; (8001a94 <Traffic_Light_Update_34+0x198>)
 8001a24:	f000 fb69 	bl	80020fa <HAL_GPIO_WritePin>
		Time_in_state_2--;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	4a1a      	ldr	r2, [pc, #104]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 8001a30:	6013      	str	r3, [r2, #0]
		display7SEG_3(Time_in_state_2/10);
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <Traffic_Light_Update_34+0x1a0>)
 8001a38:	fb82 1203 	smull	r1, r2, r2, r3
 8001a3c:	1092      	asrs	r2, r2, #2
 8001a3e:	17db      	asrs	r3, r3, #31
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fef4 	bl	8000830 <display7SEG_3>
		display7SEG_4(Time_in_state_2%10);
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <Traffic_Light_Update_34+0x1a0>)
 8001a4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a52:	1099      	asrs	r1, r3, #2
 8001a54:	17d3      	asrs	r3, r2, #31
 8001a56:	1ac9      	subs	r1, r1, r3
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	1ad1      	subs	r1, r2, r3
 8001a62:	4608      	mov	r0, r1
 8001a64:	f7fe ffde 	bl	8000a24 <display7SEG_4>
		if(Time_in_state_2 == 0)
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10b      	bne.n	8001a88 <Traffic_Light_Update_34+0x18c>
			Light_state_BT = YELLOW;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <Traffic_Light_Update_34+0x194>)
 8001a72:	2202      	movs	r2, #2
 8001a74:	601a      	str	r2, [r3, #0]
			Time_in_state_2 = yellow_duration;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <Traffic_Light_Update_34+0x1ac>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <Traffic_Light_Update_34+0x19c>)
 8001a7c:	6013      	str	r3, [r2, #0]
		break;
 8001a7e:	e003      	b.n	8001a88 <Traffic_Light_Update_34+0x18c>
		break;
 8001a80:	bf00      	nop
 8001a82:	e002      	b.n	8001a8a <Traffic_Light_Update_34+0x18e>
		break;
 8001a84:	bf00      	nop
 8001a86:	e000      	b.n	8001a8a <Traffic_Light_Update_34+0x18e>
		break;
 8001a88:	bf00      	nop
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200000dc 	.word	0x200000dc
 8001a94:	40010800 	.word	0x40010800
 8001a98:	20000054 	.word	0x20000054
 8001a9c:	66666667 	.word	0x66666667
 8001aa0:	2000003c 	.word	0x2000003c
 8001aa4:	20000038 	.word	0x20000038
 8001aa8:	20000040 	.word	0x20000040

08001aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	; (8001af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ad2:	f7ff fe27 	bl	8001724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f001 fb0d 	bl	80030f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ada:	f7ff fbaf 	bl	800123c <main>
  bx lr
 8001ade:	4770      	bx	lr
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ae8:	0800318c 	.word	0x0800318c
  ldr r2, =_sbss
 8001aec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001af0:	2000012c 	.word	0x2000012c

08001af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC1_2_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_Init+0x28>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_Init+0x28>)
 8001b02:	f043 0310 	orr.w	r3, r3, #16
 8001b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f923 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fd7e 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f93b 	bl	8001dbe <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f903 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000004c 	.word	0x2000004c
 8001b7c:	2000005c 	.word	0x2000005c
 8001b80:	20000058 	.word	0x20000058

08001b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_IncTick+0x1c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a03      	ldr	r2, [pc, #12]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	2000005c 	.word	0x2000005c
 8001ba4:	20000128 	.word	0x20000128

08001ba8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <HAL_GetTick+0x10>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000128 	.word	0x20000128

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4906      	ldr	r1, [pc, #24]	; (8001c54 <__NVIC_EnableIRQ+0x34>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff90 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff2d 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff42 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff90 	bl	8001cac <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5f 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff35 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa2 	bl	8001d10 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b08b      	sub	sp, #44	; 0x2c
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dea:	e148      	b.n	800207e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dec:	2201      	movs	r2, #1
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	f040 8137 	bne.w	8002078 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4aa3      	ldr	r2, [pc, #652]	; (800209c <HAL_GPIO_Init+0x2c4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d05e      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e14:	4aa1      	ldr	r2, [pc, #644]	; (800209c <HAL_GPIO_Init+0x2c4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d875      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e1a:	4aa1      	ldr	r2, [pc, #644]	; (80020a0 <HAL_GPIO_Init+0x2c8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d058      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e20:	4a9f      	ldr	r2, [pc, #636]	; (80020a0 <HAL_GPIO_Init+0x2c8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d86f      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e26:	4a9f      	ldr	r2, [pc, #636]	; (80020a4 <HAL_GPIO_Init+0x2cc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d052      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e2c:	4a9d      	ldr	r2, [pc, #628]	; (80020a4 <HAL_GPIO_Init+0x2cc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d869      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e32:	4a9d      	ldr	r2, [pc, #628]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d04c      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e38:	4a9b      	ldr	r2, [pc, #620]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d863      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e3e:	4a9b      	ldr	r2, [pc, #620]	; (80020ac <HAL_GPIO_Init+0x2d4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d046      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e44:	4a99      	ldr	r2, [pc, #612]	; (80020ac <HAL_GPIO_Init+0x2d4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d85d      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	d82a      	bhi.n	8001ea4 <HAL_GPIO_Init+0xcc>
 8001e4e:	2b12      	cmp	r3, #18
 8001e50:	d859      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e52:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <HAL_GPIO_Init+0x80>)
 8001e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e58:	08001ed3 	.word	0x08001ed3
 8001e5c:	08001ead 	.word	0x08001ead
 8001e60:	08001ebf 	.word	0x08001ebf
 8001e64:	08001f01 	.word	0x08001f01
 8001e68:	08001f07 	.word	0x08001f07
 8001e6c:	08001f07 	.word	0x08001f07
 8001e70:	08001f07 	.word	0x08001f07
 8001e74:	08001f07 	.word	0x08001f07
 8001e78:	08001f07 	.word	0x08001f07
 8001e7c:	08001f07 	.word	0x08001f07
 8001e80:	08001f07 	.word	0x08001f07
 8001e84:	08001f07 	.word	0x08001f07
 8001e88:	08001f07 	.word	0x08001f07
 8001e8c:	08001f07 	.word	0x08001f07
 8001e90:	08001f07 	.word	0x08001f07
 8001e94:	08001f07 	.word	0x08001f07
 8001e98:	08001f07 	.word	0x08001f07
 8001e9c:	08001eb5 	.word	0x08001eb5
 8001ea0:	08001ec9 	.word	0x08001ec9
 8001ea4:	4a82      	ldr	r2, [pc, #520]	; (80020b0 <HAL_GPIO_Init+0x2d8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eaa:	e02c      	b.n	8001f06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e029      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	623b      	str	r3, [r7, #32]
          break;
 8001ebc:	e024      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	623b      	str	r3, [r7, #32]
          break;
 8001ec6:	e01f      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	330c      	adds	r3, #12
 8001ece:	623b      	str	r3, [r7, #32]
          break;
 8001ed0:	e01a      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eda:	2304      	movs	r3, #4
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e013      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	611a      	str	r2, [r3, #16]
          break;
 8001ef2:	e009      	b.n	8001f08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	615a      	str	r2, [r3, #20]
          break;
 8001efe:	e003      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
          break;
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          break;
 8001f06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2bff      	cmp	r3, #255	; 0xff
 8001f0c:	d801      	bhi.n	8001f12 <HAL_GPIO_Init+0x13a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	e001      	b.n	8001f16 <HAL_GPIO_Init+0x13e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2bff      	cmp	r3, #255	; 0xff
 8001f1c:	d802      	bhi.n	8001f24 <HAL_GPIO_Init+0x14c>
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x152>
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	3b08      	subs	r3, #8
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	210f      	movs	r1, #15
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	6a39      	ldr	r1, [r7, #32]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	431a      	orrs	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8090 	beq.w	8002078 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f58:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a55      	ldr	r2, [pc, #340]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f70:	4a51      	ldr	r2, [pc, #324]	; (80020b8 <HAL_GPIO_Init+0x2e0>)
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a49      	ldr	r2, [pc, #292]	; (80020bc <HAL_GPIO_Init+0x2e4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_GPIO_Init+0x1e0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a48      	ldr	r2, [pc, #288]	; (80020c0 <HAL_GPIO_Init+0x2e8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <HAL_GPIO_Init+0x1dc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a47      	ldr	r2, [pc, #284]	; (80020c4 <HAL_GPIO_Init+0x2ec>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d101      	bne.n	8001fb0 <HAL_GPIO_Init+0x1d8>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e004      	b.n	8001fba <HAL_GPIO_Init+0x1e2>
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_Init+0x1e2>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_Init+0x1e2>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbc:	f002 0203 	and.w	r2, r2, #3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fca:	493b      	ldr	r1, [pc, #236]	; (80020b8 <HAL_GPIO_Init+0x2e0>)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fe4:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4937      	ldr	r1, [pc, #220]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff2:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4933      	ldr	r1, [pc, #204]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800200c:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	492d      	ldr	r1, [pc, #180]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800201a:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	4929      	ldr	r1, [pc, #164]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002024:	4013      	ands	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002034:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4923      	ldr	r1, [pc, #140]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	491f      	ldr	r1, [pc, #124]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800204c:	4013      	ands	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4919      	ldr	r1, [pc, #100]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	60cb      	str	r3, [r1, #12]
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	43db      	mvns	r3, r3
 8002072:	4915      	ldr	r1, [pc, #84]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002074:	4013      	ands	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	3301      	adds	r3, #1
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	f47f aeaf 	bne.w	8001dec <HAL_GPIO_Init+0x14>
  }
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	372c      	adds	r7, #44	; 0x2c
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	10320000 	.word	0x10320000
 80020a0:	10310000 	.word	0x10310000
 80020a4:	10220000 	.word	0x10220000
 80020a8:	10210000 	.word	0x10210000
 80020ac:	10120000 	.word	0x10120000
 80020b0:	10110000 	.word	0x10110000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010000 	.word	0x40010000
 80020bc:	40010800 	.word	0x40010800
 80020c0:	40010c00 	.word	0x40010c00
 80020c4:	40011000 	.word	0x40011000
 80020c8:	40010400 	.word	0x40010400

080020cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e001      	b.n	80020ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	807b      	strh	r3, [r7, #2]
 8002106:	4613      	mov	r3, r2
 8002108:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800210a:	787b      	ldrb	r3, [r7, #1]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002110:	887a      	ldrh	r2, [r7, #2]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002116:	e003      	b.n	8002120 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	041a      	lsls	r2, r3, #16
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	611a      	str	r2, [r3, #16]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800213c:	887a      	ldrh	r2, [r7, #2]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	041a      	lsls	r2, r3, #16
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43d9      	mvns	r1, r3
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	400b      	ands	r3, r1
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e26c      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8087 	beq.w	800228a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800217c:	4b92      	ldr	r3, [pc, #584]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b04      	cmp	r3, #4
 8002186:	d00c      	beq.n	80021a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002188:	4b8f      	ldr	r3, [pc, #572]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b08      	cmp	r3, #8
 8002192:	d112      	bne.n	80021ba <HAL_RCC_OscConfig+0x5e>
 8002194:	4b8c      	ldr	r3, [pc, #560]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d10b      	bne.n	80021ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a2:	4b89      	ldr	r3, [pc, #548]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d06c      	beq.n	8002288 <HAL_RCC_OscConfig+0x12c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d168      	bne.n	8002288 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e246      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x76>
 80021c4:	4b80      	ldr	r3, [pc, #512]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a7f      	ldr	r2, [pc, #508]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	e02e      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x98>
 80021da:	4b7b      	ldr	r3, [pc, #492]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a7a      	ldr	r2, [pc, #488]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b78      	ldr	r3, [pc, #480]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a77      	ldr	r2, [pc, #476]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e01d      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0xbc>
 80021fe:	4b72      	ldr	r3, [pc, #456]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a71      	ldr	r2, [pc, #452]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b6f      	ldr	r3, [pc, #444]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6e      	ldr	r2, [pc, #440]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 8002218:	4b6b      	ldr	r3, [pc, #428]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a6a      	ldr	r2, [pc, #424]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a67      	ldr	r2, [pc, #412]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fcb6 	bl	8001ba8 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff fcb2 	bl	8001ba8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1fa      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0xe4>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fca2 	bl	8001ba8 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff fc9e 	bl	8001ba8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1e6      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x10c>
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002296:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022a2:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d11c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x18c>
 80022ae:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_OscConfig+0x176>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e1ba      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4939      	ldr	r1, [pc, #228]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	e03a      	b.n	800235e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f0:	4b36      	ldr	r3, [pc, #216]	; (80023cc <HAL_RCC_OscConfig+0x270>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff fc57 	bl	8001ba8 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fe:	f7ff fc53 	bl	8001ba8 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e19b      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4927      	ldr	r1, [pc, #156]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
 8002330:	e015      	b.n	800235e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <HAL_RCC_OscConfig+0x270>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff fc36 	bl	8001ba8 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002340:	f7ff fc32 	bl	8001ba8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e17a      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d03a      	beq.n	80023e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d019      	beq.n	80023a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7ff fc16 	bl	8001ba8 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7ff fc12 	bl	8001ba8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e15a      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800239e:	2001      	movs	r0, #1
 80023a0:	f000 faa6 	bl	80028f0 <RCC_Delay>
 80023a4:	e01c      	b.n	80023e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_RCC_OscConfig+0x274>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff fbfc 	bl	8001ba8 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b2:	e00f      	b.n	80023d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7ff fbf8 	bl	8001ba8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d908      	bls.n	80023d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e140      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	42420000 	.word	0x42420000
 80023d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	4b9e      	ldr	r3, [pc, #632]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e9      	bne.n	80023b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a6 	beq.w	800253a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b97      	ldr	r3, [pc, #604]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10d      	bne.n	800241a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b94      	ldr	r3, [pc, #592]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a93      	ldr	r2, [pc, #588]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	61d3      	str	r3, [r2, #28]
 800240a:	4b91      	ldr	r3, [pc, #580]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b8e      	ldr	r3, [pc, #568]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a8a      	ldr	r2, [pc, #552]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7ff fbb9 	bl	8001ba8 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7ff fbb5 	bl	8001ba8 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0fd      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b81      	ldr	r3, [pc, #516]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x312>
 8002460:	4b7b      	ldr	r3, [pc, #492]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4a7a      	ldr	r2, [pc, #488]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6213      	str	r3, [r2, #32]
 800246c:	e02d      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x334>
 8002476:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a75      	ldr	r2, [pc, #468]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6213      	str	r3, [r2, #32]
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a72      	ldr	r2, [pc, #456]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	e01c      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d10c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x356>
 8002498:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4a6c      	ldr	r2, [pc, #432]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6213      	str	r3, [r2, #32]
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4a69      	ldr	r2, [pc, #420]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6213      	str	r3, [r2, #32]
 80024b0:	e00b      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4a66      	ldr	r2, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6213      	str	r3, [r2, #32]
 80024be:	4b64      	ldr	r3, [pc, #400]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a63      	ldr	r2, [pc, #396]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d015      	beq.n	80024fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7ff fb69 	bl	8001ba8 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7ff fb65 	bl	8001ba8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0ab      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f0:	4b57      	ldr	r3, [pc, #348]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ee      	beq.n	80024da <HAL_RCC_OscConfig+0x37e>
 80024fc:	e014      	b.n	8002528 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7ff fb53 	bl	8001ba8 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7ff fb4f 	bl	8001ba8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e095      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251c:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ee      	bne.n	8002506 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252e:	4b48      	ldr	r3, [pc, #288]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a47      	ldr	r2, [pc, #284]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002538:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8081 	beq.w	8002646 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002544:	4b42      	ldr	r3, [pc, #264]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d061      	beq.n	8002614 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d146      	bne.n	80025e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff fb23 	bl	8001ba8 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7ff fb1f 	bl	8001ba8 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e067      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	4b35      	ldr	r3, [pc, #212]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d108      	bne.n	80025a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800258e:	4b30      	ldr	r3, [pc, #192]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	492d      	ldr	r1, [pc, #180]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a19      	ldr	r1, [r3, #32]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	430b      	orrs	r3, r1
 80025b2:	4927      	ldr	r1, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff faf3 	bl	8001ba8 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff faef 	bl	8001ba8 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e037      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x46a>
 80025e4:	e02f      	b.n	8002646 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fadc 	bl	8001ba8 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff fad8 	bl	8001ba8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e020      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x498>
 8002612:	e018      	b.n	8002646 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e013      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	429a      	cmp	r2, r3
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	40007000 	.word	0x40007000
 8002658:	42420060 	.word	0x42420060

0800265c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0d0      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b6a      	ldr	r3, [pc, #424]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d910      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4965      	ldr	r1, [pc, #404]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b8      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	494d      	ldr	r1, [pc, #308]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d040      	beq.n	800277c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d115      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e07f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e073      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06b      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b39      	ldr	r3, [pc, #228]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4936      	ldr	r1, [pc, #216]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7ff fa2c 	bl	8001ba8 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7ff fa28 	bl	8001ba8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e053      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d210      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	4922      	ldr	r1, [pc, #136]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e032      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4916      	ldr	r1, [pc, #88]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	490e      	ldr	r1, [pc, #56]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ea:	f000 f821 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	490a      	ldr	r1, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80027fc:	5ccb      	ldrb	r3, [r1, r3]
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1cc>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1d0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f98a 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40022000 	.word	0x40022000
 8002820:	40021000 	.word	0x40021000
 8002824:	08003174 	.word	0x08003174
 8002828:	2000004c 	.word	0x2000004c
 800282c:	20000058 	.word	0x20000058

08002830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	b490      	push	{r4, r7}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002838:	1d3c      	adds	r4, r7, #4
 800283a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800283c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002840:	f240 2301 	movw	r3, #513	; 0x201
 8002844:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b04      	cmp	r3, #4
 8002868:	d002      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x40>
 800286a:	2b08      	cmp	r3, #8
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x46>
 800286e:	e02d      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002872:	623b      	str	r3, [r7, #32]
      break;
 8002874:	e02d      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	0c9b      	lsrs	r3, r3, #18
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002882:	4413      	add	r3, r2
 8002884:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002888:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c5b      	lsrs	r3, r3, #17
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028a2:	4413      	add	r3, r2
 80028a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ae:	fb02 f203 	mul.w	r2, r2, r3
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ba:	e004      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	623b      	str	r3, [r7, #32]
      break;
 80028ca:	e002      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ce:	623b      	str	r3, [r7, #32]
      break;
 80028d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d2:	6a3b      	ldr	r3, [r7, #32]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc90      	pop	{r4, r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	08003164 	.word	0x08003164
 80028e4:	40021000 	.word	0x40021000
 80028e8:	007a1200 	.word	0x007a1200
 80028ec:	003d0900 	.word	0x003d0900

080028f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <RCC_Delay+0x34>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <RCC_Delay+0x38>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0a5b      	lsrs	r3, r3, #9
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800290c:	bf00      	nop
  }
  while (Delay --);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e5a      	subs	r2, r3, #1
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f9      	bne.n	800290c <RCC_Delay+0x1c>
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	2000004c 	.word	0x2000004c
 8002928:	10624dd3 	.word	0x10624dd3

0800292c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e041      	b.n	80029c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fe90 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f000 fa6a 	bl	8002e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d001      	beq.n	80029e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e035      	b.n	8002a50 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_TIM_Base_Start_IT+0x90>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x4e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0e:	d004      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x4e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <HAL_TIM_Base_Start_IT+0x94>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d111      	bne.n	8002a3e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b06      	cmp	r3, #6
 8002a2a:	d010      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3c:	e007      	b.n	8002a4e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40000400 	.word	0x40000400

08002a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0202 	mvn.w	r2, #2
 8002a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9b1 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f9a4 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f9b3 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d122      	bne.n	8002b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d11b      	bne.n	8002b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0204 	mvn.w	r2, #4
 8002ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f987 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f97a 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f989 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0208 	mvn.w	r2, #8
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f95d 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f950 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f95f 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0210 	mvn.w	r2, #16
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2208      	movs	r2, #8
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f933 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f926 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f935 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0201 	mvn.w	r2, #1
 8002be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fe fc2e 	bl	8001444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b80      	cmp	r3, #128	; 0x80
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fa67 	bl	80030e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8f9 	bl	8002e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0220 	mvn.w	r2, #32
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa32 	bl	80030d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIM_ConfigClockSource+0x18>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0b3      	b.n	8002df4 <HAL_TIM_ConfigClockSource+0x180>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002caa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc4:	d03e      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0xd0>
 8002cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cca:	f200 8087 	bhi.w	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	f000 8085 	beq.w	8002de0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	d87f      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002cdc:	2b70      	cmp	r3, #112	; 0x70
 8002cde:	d01a      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xa2>
 8002ce0:	2b70      	cmp	r3, #112	; 0x70
 8002ce2:	d87b      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002ce4:	2b60      	cmp	r3, #96	; 0x60
 8002ce6:	d050      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x116>
 8002ce8:	2b60      	cmp	r3, #96	; 0x60
 8002cea:	d877      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002cec:	2b50      	cmp	r3, #80	; 0x50
 8002cee:	d03c      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0xf6>
 8002cf0:	2b50      	cmp	r3, #80	; 0x50
 8002cf2:	d873      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d058      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0x136>
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d86f      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002cfc:	2b30      	cmp	r3, #48	; 0x30
 8002cfe:	d064      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x156>
 8002d00:	2b30      	cmp	r3, #48	; 0x30
 8002d02:	d86b      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d060      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x156>
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d867      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05c      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x156>
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d05a      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d14:	e062      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6899      	ldr	r1, [r3, #8]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f000 f95c 	bl	8002fe2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
      break;
 8002d42:	e04e      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f000 f945 	bl	8002fe2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d66:	609a      	str	r2, [r3, #8]
      break;
 8002d68:	e03b      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f000 f8bc 	bl	8002ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2150      	movs	r1, #80	; 0x50
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f913 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002d88:	e02b      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6859      	ldr	r1, [r3, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f000 f8da 	bl	8002f50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2160      	movs	r1, #96	; 0x60
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f903 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002da8:	e01b      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f000 f89c 	bl	8002ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2140      	movs	r1, #64	; 0x40
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f8f3 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002dc8:	e00b      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f000 f8ea 	bl	8002fae <TIM_ITRx_SetConfig>
        break;
 8002dda:	e002      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ddc:	bf00      	nop
 8002dde:	e000      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002de0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a25      	ldr	r2, [pc, #148]	; (8002eec <TIM_Base_SetConfig+0xa8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <TIM_Base_SetConfig+0x28>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e62:	d003      	beq.n	8002e6c <TIM_Base_SetConfig+0x28>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <TIM_Base_SetConfig+0xac>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d108      	bne.n	8002e7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <TIM_Base_SetConfig+0xa8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <TIM_Base_SetConfig+0x52>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8c:	d003      	beq.n	8002e96 <TIM_Base_SetConfig+0x52>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <TIM_Base_SetConfig+0xac>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a07      	ldr	r2, [pc, #28]	; (8002eec <TIM_Base_SetConfig+0xa8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d103      	bne.n	8002edc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	615a      	str	r2, [r3, #20]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400

08002ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	f023 0201 	bic.w	r2, r3, #1
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f023 030a 	bic.w	r3, r3, #10
 8002f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	621a      	str	r2, [r3, #32]
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f023 0210 	bic.w	r2, r3, #16
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	031b      	lsls	r3, r3, #12
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	621a      	str	r2, [r3, #32]
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f043 0307 	orr.w	r3, r3, #7
 8002fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b087      	sub	sp, #28
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	021a      	lsls	r2, r3, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	431a      	orrs	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	609a      	str	r2, [r3, #8]
}
 8003016:	bf00      	nop
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003034:	2302      	movs	r3, #2
 8003036:	e041      	b.n	80030bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d004      	beq.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a10      	ldr	r2, [pc, #64]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10c      	bne.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003096:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40000400 	.word	0x40000400

080030d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <__libc_init_array>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	2600      	movs	r6, #0
 80030f8:	4d0c      	ldr	r5, [pc, #48]	; (800312c <__libc_init_array+0x38>)
 80030fa:	4c0d      	ldr	r4, [pc, #52]	; (8003130 <__libc_init_array+0x3c>)
 80030fc:	1b64      	subs	r4, r4, r5
 80030fe:	10a4      	asrs	r4, r4, #2
 8003100:	42a6      	cmp	r6, r4
 8003102:	d109      	bne.n	8003118 <__libc_init_array+0x24>
 8003104:	f000 f822 	bl	800314c <_init>
 8003108:	2600      	movs	r6, #0
 800310a:	4d0a      	ldr	r5, [pc, #40]	; (8003134 <__libc_init_array+0x40>)
 800310c:	4c0a      	ldr	r4, [pc, #40]	; (8003138 <__libc_init_array+0x44>)
 800310e:	1b64      	subs	r4, r4, r5
 8003110:	10a4      	asrs	r4, r4, #2
 8003112:	42a6      	cmp	r6, r4
 8003114:	d105      	bne.n	8003122 <__libc_init_array+0x2e>
 8003116:	bd70      	pop	{r4, r5, r6, pc}
 8003118:	f855 3b04 	ldr.w	r3, [r5], #4
 800311c:	4798      	blx	r3
 800311e:	3601      	adds	r6, #1
 8003120:	e7ee      	b.n	8003100 <__libc_init_array+0xc>
 8003122:	f855 3b04 	ldr.w	r3, [r5], #4
 8003126:	4798      	blx	r3
 8003128:	3601      	adds	r6, #1
 800312a:	e7f2      	b.n	8003112 <__libc_init_array+0x1e>
 800312c:	08003184 	.word	0x08003184
 8003130:	08003184 	.word	0x08003184
 8003134:	08003184 	.word	0x08003184
 8003138:	08003188 	.word	0x08003188

0800313c <memset>:
 800313c:	4603      	mov	r3, r0
 800313e:	4402      	add	r2, r0
 8003140:	4293      	cmp	r3, r2
 8003142:	d100      	bne.n	8003146 <memset+0xa>
 8003144:	4770      	bx	lr
 8003146:	f803 1b01 	strb.w	r1, [r3], #1
 800314a:	e7f9      	b.n	8003140 <memset+0x4>

0800314c <_init>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr

08003158 <_fini>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	bf00      	nop
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr
